// Code generated by go-swagger; DO NOT EDIT.

package server_switching_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// CreateServerSwitchingRuleReader is a Reader for the CreateServerSwitchingRule structure.
type CreateServerSwitchingRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateServerSwitchingRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateServerSwitchingRuleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateServerSwitchingRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateServerSwitchingRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateServerSwitchingRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateServerSwitchingRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateServerSwitchingRuleCreated creates a CreateServerSwitchingRuleCreated with default headers values
func NewCreateServerSwitchingRuleCreated() *CreateServerSwitchingRuleCreated {
	return &CreateServerSwitchingRuleCreated{}
}

/*
CreateServerSwitchingRuleCreated describes a response with status code 201, with default header values.

Server Switching Rule created
*/
type CreateServerSwitchingRuleCreated struct {
	Payload *models.ServerSwitchingRule
}

// IsSuccess returns true when this create server switching rule created response has a 2xx status code
func (o *CreateServerSwitchingRuleCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create server switching rule created response has a 3xx status code
func (o *CreateServerSwitchingRuleCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create server switching rule created response has a 4xx status code
func (o *CreateServerSwitchingRuleCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create server switching rule created response has a 5xx status code
func (o *CreateServerSwitchingRuleCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create server switching rule created response a status code equal to that given
func (o *CreateServerSwitchingRuleCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create server switching rule created response
func (o *CreateServerSwitchingRuleCreated) Code() int {
	return 201
}

func (o *CreateServerSwitchingRuleCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/server_switching_rules][%d] createServerSwitchingRuleCreated  %+v", 201, o.Payload)
}

func (o *CreateServerSwitchingRuleCreated) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/server_switching_rules][%d] createServerSwitchingRuleCreated  %+v", 201, o.Payload)
}

func (o *CreateServerSwitchingRuleCreated) GetPayload() *models.ServerSwitchingRule {
	return o.Payload
}

func (o *CreateServerSwitchingRuleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerSwitchingRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServerSwitchingRuleAccepted creates a CreateServerSwitchingRuleAccepted with default headers values
func NewCreateServerSwitchingRuleAccepted() *CreateServerSwitchingRuleAccepted {
	return &CreateServerSwitchingRuleAccepted{}
}

/*
CreateServerSwitchingRuleAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type CreateServerSwitchingRuleAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.ServerSwitchingRule
}

// IsSuccess returns true when this create server switching rule accepted response has a 2xx status code
func (o *CreateServerSwitchingRuleAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create server switching rule accepted response has a 3xx status code
func (o *CreateServerSwitchingRuleAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create server switching rule accepted response has a 4xx status code
func (o *CreateServerSwitchingRuleAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this create server switching rule accepted response has a 5xx status code
func (o *CreateServerSwitchingRuleAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this create server switching rule accepted response a status code equal to that given
func (o *CreateServerSwitchingRuleAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the create server switching rule accepted response
func (o *CreateServerSwitchingRuleAccepted) Code() int {
	return 202
}

func (o *CreateServerSwitchingRuleAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/server_switching_rules][%d] createServerSwitchingRuleAccepted  %+v", 202, o.Payload)
}

func (o *CreateServerSwitchingRuleAccepted) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/server_switching_rules][%d] createServerSwitchingRuleAccepted  %+v", 202, o.Payload)
}

func (o *CreateServerSwitchingRuleAccepted) GetPayload() *models.ServerSwitchingRule {
	return o.Payload
}

func (o *CreateServerSwitchingRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.ServerSwitchingRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServerSwitchingRuleBadRequest creates a CreateServerSwitchingRuleBadRequest with default headers values
func NewCreateServerSwitchingRuleBadRequest() *CreateServerSwitchingRuleBadRequest {
	return &CreateServerSwitchingRuleBadRequest{}
}

/*
CreateServerSwitchingRuleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateServerSwitchingRuleBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create server switching rule bad request response has a 2xx status code
func (o *CreateServerSwitchingRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create server switching rule bad request response has a 3xx status code
func (o *CreateServerSwitchingRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create server switching rule bad request response has a 4xx status code
func (o *CreateServerSwitchingRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create server switching rule bad request response has a 5xx status code
func (o *CreateServerSwitchingRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create server switching rule bad request response a status code equal to that given
func (o *CreateServerSwitchingRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create server switching rule bad request response
func (o *CreateServerSwitchingRuleBadRequest) Code() int {
	return 400
}

func (o *CreateServerSwitchingRuleBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/server_switching_rules][%d] createServerSwitchingRuleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateServerSwitchingRuleBadRequest) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/server_switching_rules][%d] createServerSwitchingRuleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateServerSwitchingRuleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateServerSwitchingRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServerSwitchingRuleConflict creates a CreateServerSwitchingRuleConflict with default headers values
func NewCreateServerSwitchingRuleConflict() *CreateServerSwitchingRuleConflict {
	return &CreateServerSwitchingRuleConflict{}
}

/*
CreateServerSwitchingRuleConflict describes a response with status code 409, with default header values.

The specified resource already exists
*/
type CreateServerSwitchingRuleConflict struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create server switching rule conflict response has a 2xx status code
func (o *CreateServerSwitchingRuleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create server switching rule conflict response has a 3xx status code
func (o *CreateServerSwitchingRuleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create server switching rule conflict response has a 4xx status code
func (o *CreateServerSwitchingRuleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create server switching rule conflict response has a 5xx status code
func (o *CreateServerSwitchingRuleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create server switching rule conflict response a status code equal to that given
func (o *CreateServerSwitchingRuleConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create server switching rule conflict response
func (o *CreateServerSwitchingRuleConflict) Code() int {
	return 409
}

func (o *CreateServerSwitchingRuleConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/server_switching_rules][%d] createServerSwitchingRuleConflict  %+v", 409, o.Payload)
}

func (o *CreateServerSwitchingRuleConflict) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/server_switching_rules][%d] createServerSwitchingRuleConflict  %+v", 409, o.Payload)
}

func (o *CreateServerSwitchingRuleConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateServerSwitchingRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServerSwitchingRuleDefault creates a CreateServerSwitchingRuleDefault with default headers values
func NewCreateServerSwitchingRuleDefault(code int) *CreateServerSwitchingRuleDefault {
	return &CreateServerSwitchingRuleDefault{
		_statusCode: code,
	}
}

/*
CreateServerSwitchingRuleDefault describes a response with status code -1, with default header values.

General Error
*/
type CreateServerSwitchingRuleDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create server switching rule default response has a 2xx status code
func (o *CreateServerSwitchingRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create server switching rule default response has a 3xx status code
func (o *CreateServerSwitchingRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create server switching rule default response has a 4xx status code
func (o *CreateServerSwitchingRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create server switching rule default response has a 5xx status code
func (o *CreateServerSwitchingRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create server switching rule default response a status code equal to that given
func (o *CreateServerSwitchingRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create server switching rule default response
func (o *CreateServerSwitchingRuleDefault) Code() int {
	return o._statusCode
}

func (o *CreateServerSwitchingRuleDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/server_switching_rules][%d] createServerSwitchingRule default  %+v", o._statusCode, o.Payload)
}

func (o *CreateServerSwitchingRuleDefault) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/server_switching_rules][%d] createServerSwitchingRule default  %+v", o._statusCode, o.Payload)
}

func (o *CreateServerSwitchingRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateServerSwitchingRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
