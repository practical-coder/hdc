// Code generated by go-swagger; DO NOT EDIT.

package http_check

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// DeleteHTTPCheckReader is a Reader for the DeleteHTTPCheck structure.
type DeleteHTTPCheckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteHTTPCheckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteHTTPCheckAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteHTTPCheckNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteHTTPCheckNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteHTTPCheckDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteHTTPCheckAccepted creates a DeleteHTTPCheckAccepted with default headers values
func NewDeleteHTTPCheckAccepted() *DeleteHTTPCheckAccepted {
	return &DeleteHTTPCheckAccepted{}
}

/*
DeleteHTTPCheckAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type DeleteHTTPCheckAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string
}

// IsSuccess returns true when this delete Http check accepted response has a 2xx status code
func (o *DeleteHTTPCheckAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete Http check accepted response has a 3xx status code
func (o *DeleteHTTPCheckAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete Http check accepted response has a 4xx status code
func (o *DeleteHTTPCheckAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete Http check accepted response has a 5xx status code
func (o *DeleteHTTPCheckAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this delete Http check accepted response a status code equal to that given
func (o *DeleteHTTPCheckAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the delete Http check accepted response
func (o *DeleteHTTPCheckAccepted) Code() int {
	return 202
}

func (o *DeleteHTTPCheckAccepted) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_checks/{index}][%d] deleteHttpCheckAccepted ", 202)
}

func (o *DeleteHTTPCheckAccepted) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_checks/{index}][%d] deleteHttpCheckAccepted ", 202)
}

func (o *DeleteHTTPCheckAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	return nil
}

// NewDeleteHTTPCheckNoContent creates a DeleteHTTPCheckNoContent with default headers values
func NewDeleteHTTPCheckNoContent() *DeleteHTTPCheckNoContent {
	return &DeleteHTTPCheckNoContent{}
}

/*
DeleteHTTPCheckNoContent describes a response with status code 204, with default header values.

HTTP check deleted
*/
type DeleteHTTPCheckNoContent struct {
}

// IsSuccess returns true when this delete Http check no content response has a 2xx status code
func (o *DeleteHTTPCheckNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete Http check no content response has a 3xx status code
func (o *DeleteHTTPCheckNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete Http check no content response has a 4xx status code
func (o *DeleteHTTPCheckNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete Http check no content response has a 5xx status code
func (o *DeleteHTTPCheckNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete Http check no content response a status code equal to that given
func (o *DeleteHTTPCheckNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete Http check no content response
func (o *DeleteHTTPCheckNoContent) Code() int {
	return 204
}

func (o *DeleteHTTPCheckNoContent) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_checks/{index}][%d] deleteHttpCheckNoContent ", 204)
}

func (o *DeleteHTTPCheckNoContent) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_checks/{index}][%d] deleteHttpCheckNoContent ", 204)
}

func (o *DeleteHTTPCheckNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteHTTPCheckNotFound creates a DeleteHTTPCheckNotFound with default headers values
func NewDeleteHTTPCheckNotFound() *DeleteHTTPCheckNotFound {
	return &DeleteHTTPCheckNotFound{}
}

/*
DeleteHTTPCheckNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type DeleteHTTPCheckNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this delete Http check not found response has a 2xx status code
func (o *DeleteHTTPCheckNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete Http check not found response has a 3xx status code
func (o *DeleteHTTPCheckNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete Http check not found response has a 4xx status code
func (o *DeleteHTTPCheckNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete Http check not found response has a 5xx status code
func (o *DeleteHTTPCheckNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete Http check not found response a status code equal to that given
func (o *DeleteHTTPCheckNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete Http check not found response
func (o *DeleteHTTPCheckNotFound) Code() int {
	return 404
}

func (o *DeleteHTTPCheckNotFound) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_checks/{index}][%d] deleteHttpCheckNotFound  %+v", 404, o.Payload)
}

func (o *DeleteHTTPCheckNotFound) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_checks/{index}][%d] deleteHttpCheckNotFound  %+v", 404, o.Payload)
}

func (o *DeleteHTTPCheckNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteHTTPCheckNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteHTTPCheckDefault creates a DeleteHTTPCheckDefault with default headers values
func NewDeleteHTTPCheckDefault(code int) *DeleteHTTPCheckDefault {
	return &DeleteHTTPCheckDefault{
		_statusCode: code,
	}
}

/*
DeleteHTTPCheckDefault describes a response with status code -1, with default header values.

General Error
*/
type DeleteHTTPCheckDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this delete HTTP check default response has a 2xx status code
func (o *DeleteHTTPCheckDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete HTTP check default response has a 3xx status code
func (o *DeleteHTTPCheckDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete HTTP check default response has a 4xx status code
func (o *DeleteHTTPCheckDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete HTTP check default response has a 5xx status code
func (o *DeleteHTTPCheckDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete HTTP check default response a status code equal to that given
func (o *DeleteHTTPCheckDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete HTTP check default response
func (o *DeleteHTTPCheckDefault) Code() int {
	return o._statusCode
}

func (o *DeleteHTTPCheckDefault) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_checks/{index}][%d] deleteHTTPCheck default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteHTTPCheckDefault) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_checks/{index}][%d] deleteHTTPCheck default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteHTTPCheckDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteHTTPCheckDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
