// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// CommitTransactionReader is a Reader for the CommitTransaction structure.
type CommitTransactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommitTransactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCommitTransactionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCommitTransactionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCommitTransactionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCommitTransactionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewCommitTransactionNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCommitTransactionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCommitTransactionOK creates a CommitTransactionOK with default headers values
func NewCommitTransactionOK() *CommitTransactionOK {
	return &CommitTransactionOK{}
}

/*
CommitTransactionOK describes a response with status code 200, with default header values.

Transaction successfully committed
*/
type CommitTransactionOK struct {
	Payload *models.Transaction
}

// IsSuccess returns true when this commit transaction o k response has a 2xx status code
func (o *CommitTransactionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this commit transaction o k response has a 3xx status code
func (o *CommitTransactionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this commit transaction o k response has a 4xx status code
func (o *CommitTransactionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this commit transaction o k response has a 5xx status code
func (o *CommitTransactionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this commit transaction o k response a status code equal to that given
func (o *CommitTransactionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the commit transaction o k response
func (o *CommitTransactionOK) Code() int {
	return 200
}

func (o *CommitTransactionOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionOK  %+v", 200, o.Payload)
}

func (o *CommitTransactionOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionOK  %+v", 200, o.Payload)
}

func (o *CommitTransactionOK) GetPayload() *models.Transaction {
	return o.Payload
}

func (o *CommitTransactionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Transaction)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitTransactionAccepted creates a CommitTransactionAccepted with default headers values
func NewCommitTransactionAccepted() *CommitTransactionAccepted {
	return &CommitTransactionAccepted{}
}

/*
CommitTransactionAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type CommitTransactionAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.Transaction
}

// IsSuccess returns true when this commit transaction accepted response has a 2xx status code
func (o *CommitTransactionAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this commit transaction accepted response has a 3xx status code
func (o *CommitTransactionAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this commit transaction accepted response has a 4xx status code
func (o *CommitTransactionAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this commit transaction accepted response has a 5xx status code
func (o *CommitTransactionAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this commit transaction accepted response a status code equal to that given
func (o *CommitTransactionAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the commit transaction accepted response
func (o *CommitTransactionAccepted) Code() int {
	return 202
}

func (o *CommitTransactionAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionAccepted  %+v", 202, o.Payload)
}

func (o *CommitTransactionAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionAccepted  %+v", 202, o.Payload)
}

func (o *CommitTransactionAccepted) GetPayload() *models.Transaction {
	return o.Payload
}

func (o *CommitTransactionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.Transaction)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitTransactionBadRequest creates a CommitTransactionBadRequest with default headers values
func NewCommitTransactionBadRequest() *CommitTransactionBadRequest {
	return &CommitTransactionBadRequest{}
}

/*
CommitTransactionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CommitTransactionBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this commit transaction bad request response has a 2xx status code
func (o *CommitTransactionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this commit transaction bad request response has a 3xx status code
func (o *CommitTransactionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this commit transaction bad request response has a 4xx status code
func (o *CommitTransactionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this commit transaction bad request response has a 5xx status code
func (o *CommitTransactionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this commit transaction bad request response a status code equal to that given
func (o *CommitTransactionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the commit transaction bad request response
func (o *CommitTransactionBadRequest) Code() int {
	return 400
}

func (o *CommitTransactionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionBadRequest  %+v", 400, o.Payload)
}

func (o *CommitTransactionBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionBadRequest  %+v", 400, o.Payload)
}

func (o *CommitTransactionBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CommitTransactionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitTransactionNotFound creates a CommitTransactionNotFound with default headers values
func NewCommitTransactionNotFound() *CommitTransactionNotFound {
	return &CommitTransactionNotFound{}
}

/*
CommitTransactionNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type CommitTransactionNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this commit transaction not found response has a 2xx status code
func (o *CommitTransactionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this commit transaction not found response has a 3xx status code
func (o *CommitTransactionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this commit transaction not found response has a 4xx status code
func (o *CommitTransactionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this commit transaction not found response has a 5xx status code
func (o *CommitTransactionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this commit transaction not found response a status code equal to that given
func (o *CommitTransactionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the commit transaction not found response
func (o *CommitTransactionNotFound) Code() int {
	return 404
}

func (o *CommitTransactionNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionNotFound  %+v", 404, o.Payload)
}

func (o *CommitTransactionNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionNotFound  %+v", 404, o.Payload)
}

func (o *CommitTransactionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CommitTransactionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitTransactionNotAcceptable creates a CommitTransactionNotAcceptable with default headers values
func NewCommitTransactionNotAcceptable() *CommitTransactionNotAcceptable {
	return &CommitTransactionNotAcceptable{}
}

/*
CommitTransactionNotAcceptable describes a response with status code 406, with default header values.

The specified resource cannot be handled
*/
type CommitTransactionNotAcceptable struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this commit transaction not acceptable response has a 2xx status code
func (o *CommitTransactionNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this commit transaction not acceptable response has a 3xx status code
func (o *CommitTransactionNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this commit transaction not acceptable response has a 4xx status code
func (o *CommitTransactionNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this commit transaction not acceptable response has a 5xx status code
func (o *CommitTransactionNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this commit transaction not acceptable response a status code equal to that given
func (o *CommitTransactionNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the commit transaction not acceptable response
func (o *CommitTransactionNotAcceptable) Code() int {
	return 406
}

func (o *CommitTransactionNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionNotAcceptable  %+v", 406, o.Payload)
}

func (o *CommitTransactionNotAcceptable) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionNotAcceptable  %+v", 406, o.Payload)
}

func (o *CommitTransactionNotAcceptable) GetPayload() *models.Error {
	return o.Payload
}

func (o *CommitTransactionNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitTransactionDefault creates a CommitTransactionDefault with default headers values
func NewCommitTransactionDefault(code int) *CommitTransactionDefault {
	return &CommitTransactionDefault{
		_statusCode: code,
	}
}

/*
CommitTransactionDefault describes a response with status code -1, with default header values.

General Error
*/
type CommitTransactionDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this commit transaction default response has a 2xx status code
func (o *CommitTransactionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this commit transaction default response has a 3xx status code
func (o *CommitTransactionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this commit transaction default response has a 4xx status code
func (o *CommitTransactionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this commit transaction default response has a 5xx status code
func (o *CommitTransactionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this commit transaction default response a status code equal to that given
func (o *CommitTransactionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the commit transaction default response
func (o *CommitTransactionDefault) Code() int {
	return o._statusCode
}

func (o *CommitTransactionDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransaction default  %+v", o._statusCode, o.Payload)
}

func (o *CommitTransactionDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransaction default  %+v", o._statusCode, o.Payload)
}

func (o *CommitTransactionDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CommitTransactionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
