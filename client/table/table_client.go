// Code generated by go-swagger; DO NOT EDIT.

package table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new table API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for table API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTable(params *CreateTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTableCreated, *CreateTableAccepted, error)

	DeleteTable(params *DeleteTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTableAccepted, *DeleteTableNoContent, error)

	GetTable(params *GetTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableOK, error)

	GetTables(params *GetTablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTablesOK, error)

	ReplaceTable(params *ReplaceTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceTableOK, *ReplaceTableAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateTable adds a new table

Adds a new table in the specified peer section in the configuration file.
*/
func (a *Client) CreateTable(params *CreateTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTableCreated, *CreateTableAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTable",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateTableCreated:
		return value, nil, nil
	case *CreateTableAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTableDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTable deletes a table

Deletes a table configuration by it's name in the specified peer section.
*/
func (a *Client) DeleteTable(params *DeleteTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTableAccepted, *DeleteTableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTable",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/tables/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTableAccepted:
		return value, nil, nil
	case *DeleteTableNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTableDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTable returns one table

Returns one table configuration by it's name in the specified peer section.
*/
func (a *Client) GetTable(params *GetTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTable",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/tables/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTables returns an array of tables

Returns an array of all tables that are configured in specified peer section.
*/
func (a *Client) GetTables(params *GetTablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTables",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTablesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReplaceTable replaces a table

Replaces a table configuration by it's name in the specified peer section.
*/
func (a *Client) ReplaceTable(params *ReplaceTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceTableOK, *ReplaceTableAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceTable",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/tables/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceTableOK:
		return value, nil, nil
	case *ReplaceTableAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceTableDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
