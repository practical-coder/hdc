// Code generated by go-swagger; DO NOT EDIT.

package http_error_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v4/models"
)

// CreateHTTPErrorRuleReader is a Reader for the CreateHTTPErrorRule structure.
type CreateHTTPErrorRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateHTTPErrorRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateHTTPErrorRuleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateHTTPErrorRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateHTTPErrorRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateHTTPErrorRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateHTTPErrorRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateHTTPErrorRuleCreated creates a CreateHTTPErrorRuleCreated with default headers values
func NewCreateHTTPErrorRuleCreated() *CreateHTTPErrorRuleCreated {
	return &CreateHTTPErrorRuleCreated{}
}

/*
CreateHTTPErrorRuleCreated describes a response with status code 201, with default header values.

HTTP Error Rule created
*/
type CreateHTTPErrorRuleCreated struct {
	Payload *models.HTTPErrorRule
}

// IsSuccess returns true when this create Http error rule created response has a 2xx status code
func (o *CreateHTTPErrorRuleCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create Http error rule created response has a 3xx status code
func (o *CreateHTTPErrorRuleCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create Http error rule created response has a 4xx status code
func (o *CreateHTTPErrorRuleCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create Http error rule created response has a 5xx status code
func (o *CreateHTTPErrorRuleCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create Http error rule created response a status code equal to that given
func (o *CreateHTTPErrorRuleCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateHTTPErrorRuleCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_error_rules][%d] createHttpErrorRuleCreated  %+v", 201, o.Payload)
}

func (o *CreateHTTPErrorRuleCreated) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_error_rules][%d] createHttpErrorRuleCreated  %+v", 201, o.Payload)
}

func (o *CreateHTTPErrorRuleCreated) GetPayload() *models.HTTPErrorRule {
	return o.Payload
}

func (o *CreateHTTPErrorRuleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHTTPErrorRuleAccepted creates a CreateHTTPErrorRuleAccepted with default headers values
func NewCreateHTTPErrorRuleAccepted() *CreateHTTPErrorRuleAccepted {
	return &CreateHTTPErrorRuleAccepted{}
}

/*
CreateHTTPErrorRuleAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type CreateHTTPErrorRuleAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.HTTPErrorRule
}

// IsSuccess returns true when this create Http error rule accepted response has a 2xx status code
func (o *CreateHTTPErrorRuleAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create Http error rule accepted response has a 3xx status code
func (o *CreateHTTPErrorRuleAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create Http error rule accepted response has a 4xx status code
func (o *CreateHTTPErrorRuleAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this create Http error rule accepted response has a 5xx status code
func (o *CreateHTTPErrorRuleAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this create Http error rule accepted response a status code equal to that given
func (o *CreateHTTPErrorRuleAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *CreateHTTPErrorRuleAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_error_rules][%d] createHttpErrorRuleAccepted  %+v", 202, o.Payload)
}

func (o *CreateHTTPErrorRuleAccepted) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_error_rules][%d] createHttpErrorRuleAccepted  %+v", 202, o.Payload)
}

func (o *CreateHTTPErrorRuleAccepted) GetPayload() *models.HTTPErrorRule {
	return o.Payload
}

func (o *CreateHTTPErrorRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.HTTPErrorRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHTTPErrorRuleBadRequest creates a CreateHTTPErrorRuleBadRequest with default headers values
func NewCreateHTTPErrorRuleBadRequest() *CreateHTTPErrorRuleBadRequest {
	return &CreateHTTPErrorRuleBadRequest{}
}

/*
CreateHTTPErrorRuleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateHTTPErrorRuleBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create Http error rule bad request response has a 2xx status code
func (o *CreateHTTPErrorRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create Http error rule bad request response has a 3xx status code
func (o *CreateHTTPErrorRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create Http error rule bad request response has a 4xx status code
func (o *CreateHTTPErrorRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create Http error rule bad request response has a 5xx status code
func (o *CreateHTTPErrorRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create Http error rule bad request response a status code equal to that given
func (o *CreateHTTPErrorRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateHTTPErrorRuleBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_error_rules][%d] createHttpErrorRuleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateHTTPErrorRuleBadRequest) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_error_rules][%d] createHttpErrorRuleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateHTTPErrorRuleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateHTTPErrorRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHTTPErrorRuleConflict creates a CreateHTTPErrorRuleConflict with default headers values
func NewCreateHTTPErrorRuleConflict() *CreateHTTPErrorRuleConflict {
	return &CreateHTTPErrorRuleConflict{}
}

/*
CreateHTTPErrorRuleConflict describes a response with status code 409, with default header values.

The specified resource already exists
*/
type CreateHTTPErrorRuleConflict struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create Http error rule conflict response has a 2xx status code
func (o *CreateHTTPErrorRuleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create Http error rule conflict response has a 3xx status code
func (o *CreateHTTPErrorRuleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create Http error rule conflict response has a 4xx status code
func (o *CreateHTTPErrorRuleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create Http error rule conflict response has a 5xx status code
func (o *CreateHTTPErrorRuleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create Http error rule conflict response a status code equal to that given
func (o *CreateHTTPErrorRuleConflict) IsCode(code int) bool {
	return code == 409
}

func (o *CreateHTTPErrorRuleConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_error_rules][%d] createHttpErrorRuleConflict  %+v", 409, o.Payload)
}

func (o *CreateHTTPErrorRuleConflict) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_error_rules][%d] createHttpErrorRuleConflict  %+v", 409, o.Payload)
}

func (o *CreateHTTPErrorRuleConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateHTTPErrorRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHTTPErrorRuleDefault creates a CreateHTTPErrorRuleDefault with default headers values
func NewCreateHTTPErrorRuleDefault(code int) *CreateHTTPErrorRuleDefault {
	return &CreateHTTPErrorRuleDefault{
		_statusCode: code,
	}
}

/*
CreateHTTPErrorRuleDefault describes a response with status code -1, with default header values.

General Error
*/
type CreateHTTPErrorRuleDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the create HTTP error rule default response
func (o *CreateHTTPErrorRuleDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this create HTTP error rule default response has a 2xx status code
func (o *CreateHTTPErrorRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create HTTP error rule default response has a 3xx status code
func (o *CreateHTTPErrorRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create HTTP error rule default response has a 4xx status code
func (o *CreateHTTPErrorRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create HTTP error rule default response has a 5xx status code
func (o *CreateHTTPErrorRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create HTTP error rule default response a status code equal to that given
func (o *CreateHTTPErrorRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *CreateHTTPErrorRuleDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_error_rules][%d] createHTTPErrorRule default  %+v", o._statusCode, o.Payload)
}

func (o *CreateHTTPErrorRuleDefault) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/http_error_rules][%d] createHTTPErrorRule default  %+v", o._statusCode, o.Payload)
}

func (o *CreateHTTPErrorRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateHTTPErrorRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
