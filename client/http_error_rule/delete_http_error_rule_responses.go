// Code generated by go-swagger; DO NOT EDIT.

package http_error_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// DeleteHTTPErrorRuleReader is a Reader for the DeleteHTTPErrorRule structure.
type DeleteHTTPErrorRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteHTTPErrorRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteHTTPErrorRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteHTTPErrorRuleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteHTTPErrorRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteHTTPErrorRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteHTTPErrorRuleAccepted creates a DeleteHTTPErrorRuleAccepted with default headers values
func NewDeleteHTTPErrorRuleAccepted() *DeleteHTTPErrorRuleAccepted {
	return &DeleteHTTPErrorRuleAccepted{}
}

/*
DeleteHTTPErrorRuleAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type DeleteHTTPErrorRuleAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string
}

// IsSuccess returns true when this delete Http error rule accepted response has a 2xx status code
func (o *DeleteHTTPErrorRuleAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete Http error rule accepted response has a 3xx status code
func (o *DeleteHTTPErrorRuleAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete Http error rule accepted response has a 4xx status code
func (o *DeleteHTTPErrorRuleAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete Http error rule accepted response has a 5xx status code
func (o *DeleteHTTPErrorRuleAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this delete Http error rule accepted response a status code equal to that given
func (o *DeleteHTTPErrorRuleAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the delete Http error rule accepted response
func (o *DeleteHTTPErrorRuleAccepted) Code() int {
	return 202
}

func (o *DeleteHTTPErrorRuleAccepted) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_error_rules/{index}][%d] deleteHttpErrorRuleAccepted ", 202)
}

func (o *DeleteHTTPErrorRuleAccepted) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_error_rules/{index}][%d] deleteHttpErrorRuleAccepted ", 202)
}

func (o *DeleteHTTPErrorRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	return nil
}

// NewDeleteHTTPErrorRuleNoContent creates a DeleteHTTPErrorRuleNoContent with default headers values
func NewDeleteHTTPErrorRuleNoContent() *DeleteHTTPErrorRuleNoContent {
	return &DeleteHTTPErrorRuleNoContent{}
}

/*
DeleteHTTPErrorRuleNoContent describes a response with status code 204, with default header values.

HTTP Error Rule deleted
*/
type DeleteHTTPErrorRuleNoContent struct {
}

// IsSuccess returns true when this delete Http error rule no content response has a 2xx status code
func (o *DeleteHTTPErrorRuleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete Http error rule no content response has a 3xx status code
func (o *DeleteHTTPErrorRuleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete Http error rule no content response has a 4xx status code
func (o *DeleteHTTPErrorRuleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete Http error rule no content response has a 5xx status code
func (o *DeleteHTTPErrorRuleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete Http error rule no content response a status code equal to that given
func (o *DeleteHTTPErrorRuleNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete Http error rule no content response
func (o *DeleteHTTPErrorRuleNoContent) Code() int {
	return 204
}

func (o *DeleteHTTPErrorRuleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_error_rules/{index}][%d] deleteHttpErrorRuleNoContent ", 204)
}

func (o *DeleteHTTPErrorRuleNoContent) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_error_rules/{index}][%d] deleteHttpErrorRuleNoContent ", 204)
}

func (o *DeleteHTTPErrorRuleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteHTTPErrorRuleNotFound creates a DeleteHTTPErrorRuleNotFound with default headers values
func NewDeleteHTTPErrorRuleNotFound() *DeleteHTTPErrorRuleNotFound {
	return &DeleteHTTPErrorRuleNotFound{}
}

/*
DeleteHTTPErrorRuleNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type DeleteHTTPErrorRuleNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this delete Http error rule not found response has a 2xx status code
func (o *DeleteHTTPErrorRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete Http error rule not found response has a 3xx status code
func (o *DeleteHTTPErrorRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete Http error rule not found response has a 4xx status code
func (o *DeleteHTTPErrorRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete Http error rule not found response has a 5xx status code
func (o *DeleteHTTPErrorRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete Http error rule not found response a status code equal to that given
func (o *DeleteHTTPErrorRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete Http error rule not found response
func (o *DeleteHTTPErrorRuleNotFound) Code() int {
	return 404
}

func (o *DeleteHTTPErrorRuleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_error_rules/{index}][%d] deleteHttpErrorRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteHTTPErrorRuleNotFound) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_error_rules/{index}][%d] deleteHttpErrorRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteHTTPErrorRuleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteHTTPErrorRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteHTTPErrorRuleDefault creates a DeleteHTTPErrorRuleDefault with default headers values
func NewDeleteHTTPErrorRuleDefault(code int) *DeleteHTTPErrorRuleDefault {
	return &DeleteHTTPErrorRuleDefault{
		_statusCode: code,
	}
}

/*
DeleteHTTPErrorRuleDefault describes a response with status code -1, with default header values.

General Error
*/
type DeleteHTTPErrorRuleDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this delete HTTP error rule default response has a 2xx status code
func (o *DeleteHTTPErrorRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete HTTP error rule default response has a 3xx status code
func (o *DeleteHTTPErrorRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete HTTP error rule default response has a 4xx status code
func (o *DeleteHTTPErrorRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete HTTP error rule default response has a 5xx status code
func (o *DeleteHTTPErrorRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete HTTP error rule default response a status code equal to that given
func (o *DeleteHTTPErrorRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete HTTP error rule default response
func (o *DeleteHTTPErrorRuleDefault) Code() int {
	return o._statusCode
}

func (o *DeleteHTTPErrorRuleDefault) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_error_rules/{index}][%d] deleteHTTPErrorRule default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteHTTPErrorRuleDefault) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_error_rules/{index}][%d] deleteHTTPErrorRule default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteHTTPErrorRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteHTTPErrorRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
