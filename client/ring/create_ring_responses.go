// Code generated by go-swagger; DO NOT EDIT.

package ring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// CreateRingReader is a Reader for the CreateRing structure.
type CreateRingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateRingCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateRingAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateRingConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateRingDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateRingCreated creates a CreateRingCreated with default headers values
func NewCreateRingCreated() *CreateRingCreated {
	return &CreateRingCreated{}
}

/*
CreateRingCreated describes a response with status code 201, with default header values.

Ring created
*/
type CreateRingCreated struct {
	Payload *models.Ring
}

// IsSuccess returns true when this create ring created response has a 2xx status code
func (o *CreateRingCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create ring created response has a 3xx status code
func (o *CreateRingCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ring created response has a 4xx status code
func (o *CreateRingCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create ring created response has a 5xx status code
func (o *CreateRingCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create ring created response a status code equal to that given
func (o *CreateRingCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create ring created response
func (o *CreateRingCreated) Code() int {
	return 201
}

func (o *CreateRingCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/rings][%d] createRingCreated  %+v", 201, o.Payload)
}

func (o *CreateRingCreated) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/rings][%d] createRingCreated  %+v", 201, o.Payload)
}

func (o *CreateRingCreated) GetPayload() *models.Ring {
	return o.Payload
}

func (o *CreateRingCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Ring)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRingAccepted creates a CreateRingAccepted with default headers values
func NewCreateRingAccepted() *CreateRingAccepted {
	return &CreateRingAccepted{}
}

/*
CreateRingAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type CreateRingAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.Ring
}

// IsSuccess returns true when this create ring accepted response has a 2xx status code
func (o *CreateRingAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create ring accepted response has a 3xx status code
func (o *CreateRingAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ring accepted response has a 4xx status code
func (o *CreateRingAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this create ring accepted response has a 5xx status code
func (o *CreateRingAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this create ring accepted response a status code equal to that given
func (o *CreateRingAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the create ring accepted response
func (o *CreateRingAccepted) Code() int {
	return 202
}

func (o *CreateRingAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/rings][%d] createRingAccepted  %+v", 202, o.Payload)
}

func (o *CreateRingAccepted) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/rings][%d] createRingAccepted  %+v", 202, o.Payload)
}

func (o *CreateRingAccepted) GetPayload() *models.Ring {
	return o.Payload
}

func (o *CreateRingAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.Ring)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRingBadRequest creates a CreateRingBadRequest with default headers values
func NewCreateRingBadRequest() *CreateRingBadRequest {
	return &CreateRingBadRequest{}
}

/*
CreateRingBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateRingBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create ring bad request response has a 2xx status code
func (o *CreateRingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create ring bad request response has a 3xx status code
func (o *CreateRingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ring bad request response has a 4xx status code
func (o *CreateRingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create ring bad request response has a 5xx status code
func (o *CreateRingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create ring bad request response a status code equal to that given
func (o *CreateRingBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create ring bad request response
func (o *CreateRingBadRequest) Code() int {
	return 400
}

func (o *CreateRingBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/rings][%d] createRingBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRingBadRequest) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/rings][%d] createRingBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRingBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRingConflict creates a CreateRingConflict with default headers values
func NewCreateRingConflict() *CreateRingConflict {
	return &CreateRingConflict{}
}

/*
CreateRingConflict describes a response with status code 409, with default header values.

The specified resource already exists
*/
type CreateRingConflict struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create ring conflict response has a 2xx status code
func (o *CreateRingConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create ring conflict response has a 3xx status code
func (o *CreateRingConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ring conflict response has a 4xx status code
func (o *CreateRingConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create ring conflict response has a 5xx status code
func (o *CreateRingConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create ring conflict response a status code equal to that given
func (o *CreateRingConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create ring conflict response
func (o *CreateRingConflict) Code() int {
	return 409
}

func (o *CreateRingConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/rings][%d] createRingConflict  %+v", 409, o.Payload)
}

func (o *CreateRingConflict) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/rings][%d] createRingConflict  %+v", 409, o.Payload)
}

func (o *CreateRingConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRingConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRingDefault creates a CreateRingDefault with default headers values
func NewCreateRingDefault(code int) *CreateRingDefault {
	return &CreateRingDefault{
		_statusCode: code,
	}
}

/*
CreateRingDefault describes a response with status code -1, with default header values.

General Error
*/
type CreateRingDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create ring default response has a 2xx status code
func (o *CreateRingDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create ring default response has a 3xx status code
func (o *CreateRingDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create ring default response has a 4xx status code
func (o *CreateRingDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create ring default response has a 5xx status code
func (o *CreateRingDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create ring default response a status code equal to that given
func (o *CreateRingDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create ring default response
func (o *CreateRingDefault) Code() int {
	return o._statusCode
}

func (o *CreateRingDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/rings][%d] createRing default  %+v", o._statusCode, o.Payload)
}

func (o *CreateRingDefault) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/rings][%d] createRing default  %+v", o._statusCode, o.Payload)
}

func (o *CreateRingDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRingDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
