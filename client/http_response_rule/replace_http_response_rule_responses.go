// Code generated by go-swagger; DO NOT EDIT.

package http_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// ReplaceHTTPResponseRuleReader is a Reader for the ReplaceHTTPResponseRule structure.
type ReplaceHTTPResponseRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceHTTPResponseRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceHTTPResponseRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceHTTPResponseRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceHTTPResponseRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceHTTPResponseRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceHTTPResponseRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceHTTPResponseRuleOK creates a ReplaceHTTPResponseRuleOK with default headers values
func NewReplaceHTTPResponseRuleOK() *ReplaceHTTPResponseRuleOK {
	return &ReplaceHTTPResponseRuleOK{}
}

/*
ReplaceHTTPResponseRuleOK describes a response with status code 200, with default header values.

HTTP Response Rule replaced
*/
type ReplaceHTTPResponseRuleOK struct {
	Payload *models.HTTPResponseRule
}

// IsSuccess returns true when this replace Http response rule o k response has a 2xx status code
func (o *ReplaceHTTPResponseRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace Http response rule o k response has a 3xx status code
func (o *ReplaceHTTPResponseRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http response rule o k response has a 4xx status code
func (o *ReplaceHTTPResponseRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace Http response rule o k response has a 5xx status code
func (o *ReplaceHTTPResponseRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http response rule o k response a status code equal to that given
func (o *ReplaceHTTPResponseRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replace Http response rule o k response
func (o *ReplaceHTTPResponseRuleOK) Code() int {
	return 200
}

func (o *ReplaceHTTPResponseRuleOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_response_rules/{index}][%d] replaceHttpResponseRuleOK  %+v", 200, o.Payload)
}

func (o *ReplaceHTTPResponseRuleOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_response_rules/{index}][%d] replaceHttpResponseRuleOK  %+v", 200, o.Payload)
}

func (o *ReplaceHTTPResponseRuleOK) GetPayload() *models.HTTPResponseRule {
	return o.Payload
}

func (o *ReplaceHTTPResponseRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPResponseRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPResponseRuleAccepted creates a ReplaceHTTPResponseRuleAccepted with default headers values
func NewReplaceHTTPResponseRuleAccepted() *ReplaceHTTPResponseRuleAccepted {
	return &ReplaceHTTPResponseRuleAccepted{}
}

/*
ReplaceHTTPResponseRuleAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceHTTPResponseRuleAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.HTTPResponseRule
}

// IsSuccess returns true when this replace Http response rule accepted response has a 2xx status code
func (o *ReplaceHTTPResponseRuleAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace Http response rule accepted response has a 3xx status code
func (o *ReplaceHTTPResponseRuleAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http response rule accepted response has a 4xx status code
func (o *ReplaceHTTPResponseRuleAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace Http response rule accepted response has a 5xx status code
func (o *ReplaceHTTPResponseRuleAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http response rule accepted response a status code equal to that given
func (o *ReplaceHTTPResponseRuleAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the replace Http response rule accepted response
func (o *ReplaceHTTPResponseRuleAccepted) Code() int {
	return 202
}

func (o *ReplaceHTTPResponseRuleAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_response_rules/{index}][%d] replaceHttpResponseRuleAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceHTTPResponseRuleAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_response_rules/{index}][%d] replaceHttpResponseRuleAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceHTTPResponseRuleAccepted) GetPayload() *models.HTTPResponseRule {
	return o.Payload
}

func (o *ReplaceHTTPResponseRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.HTTPResponseRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPResponseRuleBadRequest creates a ReplaceHTTPResponseRuleBadRequest with default headers values
func NewReplaceHTTPResponseRuleBadRequest() *ReplaceHTTPResponseRuleBadRequest {
	return &ReplaceHTTPResponseRuleBadRequest{}
}

/*
ReplaceHTTPResponseRuleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceHTTPResponseRuleBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace Http response rule bad request response has a 2xx status code
func (o *ReplaceHTTPResponseRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace Http response rule bad request response has a 3xx status code
func (o *ReplaceHTTPResponseRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http response rule bad request response has a 4xx status code
func (o *ReplaceHTTPResponseRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace Http response rule bad request response has a 5xx status code
func (o *ReplaceHTTPResponseRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http response rule bad request response a status code equal to that given
func (o *ReplaceHTTPResponseRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replace Http response rule bad request response
func (o *ReplaceHTTPResponseRuleBadRequest) Code() int {
	return 400
}

func (o *ReplaceHTTPResponseRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_response_rules/{index}][%d] replaceHttpResponseRuleBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceHTTPResponseRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_response_rules/{index}][%d] replaceHttpResponseRuleBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceHTTPResponseRuleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPResponseRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPResponseRuleNotFound creates a ReplaceHTTPResponseRuleNotFound with default headers values
func NewReplaceHTTPResponseRuleNotFound() *ReplaceHTTPResponseRuleNotFound {
	return &ReplaceHTTPResponseRuleNotFound{}
}

/*
ReplaceHTTPResponseRuleNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type ReplaceHTTPResponseRuleNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace Http response rule not found response has a 2xx status code
func (o *ReplaceHTTPResponseRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace Http response rule not found response has a 3xx status code
func (o *ReplaceHTTPResponseRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http response rule not found response has a 4xx status code
func (o *ReplaceHTTPResponseRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace Http response rule not found response has a 5xx status code
func (o *ReplaceHTTPResponseRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http response rule not found response a status code equal to that given
func (o *ReplaceHTTPResponseRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the replace Http response rule not found response
func (o *ReplaceHTTPResponseRuleNotFound) Code() int {
	return 404
}

func (o *ReplaceHTTPResponseRuleNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_response_rules/{index}][%d] replaceHttpResponseRuleNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceHTTPResponseRuleNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_response_rules/{index}][%d] replaceHttpResponseRuleNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceHTTPResponseRuleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPResponseRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPResponseRuleDefault creates a ReplaceHTTPResponseRuleDefault with default headers values
func NewReplaceHTTPResponseRuleDefault(code int) *ReplaceHTTPResponseRuleDefault {
	return &ReplaceHTTPResponseRuleDefault{
		_statusCode: code,
	}
}

/*
ReplaceHTTPResponseRuleDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceHTTPResponseRuleDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace HTTP response rule default response has a 2xx status code
func (o *ReplaceHTTPResponseRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this replace HTTP response rule default response has a 3xx status code
func (o *ReplaceHTTPResponseRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this replace HTTP response rule default response has a 4xx status code
func (o *ReplaceHTTPResponseRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this replace HTTP response rule default response has a 5xx status code
func (o *ReplaceHTTPResponseRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this replace HTTP response rule default response a status code equal to that given
func (o *ReplaceHTTPResponseRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the replace HTTP response rule default response
func (o *ReplaceHTTPResponseRuleDefault) Code() int {
	return o._statusCode
}

func (o *ReplaceHTTPResponseRuleDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_response_rules/{index}][%d] replaceHTTPResponseRule default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceHTTPResponseRuleDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_response_rules/{index}][%d] replaceHTTPResponseRule default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceHTTPResponseRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPResponseRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
