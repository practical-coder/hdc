// Code generated by go-swagger; DO NOT EDIT.

package nameserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// ReplaceNameserverReader is a Reader for the ReplaceNameserver structure.
type ReplaceNameserverReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceNameserverReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceNameserverOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceNameserverAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceNameserverBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceNameserverNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceNameserverDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceNameserverOK creates a ReplaceNameserverOK with default headers values
func NewReplaceNameserverOK() *ReplaceNameserverOK {
	return &ReplaceNameserverOK{}
}

/*
ReplaceNameserverOK describes a response with status code 200, with default header values.

Nameserver replaced
*/
type ReplaceNameserverOK struct {
	Payload *models.Nameserver
}

// IsSuccess returns true when this replace nameserver o k response has a 2xx status code
func (o *ReplaceNameserverOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace nameserver o k response has a 3xx status code
func (o *ReplaceNameserverOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace nameserver o k response has a 4xx status code
func (o *ReplaceNameserverOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace nameserver o k response has a 5xx status code
func (o *ReplaceNameserverOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace nameserver o k response a status code equal to that given
func (o *ReplaceNameserverOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replace nameserver o k response
func (o *ReplaceNameserverOK) Code() int {
	return 200
}

func (o *ReplaceNameserverOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/nameservers/{name}][%d] replaceNameserverOK  %+v", 200, o.Payload)
}

func (o *ReplaceNameserverOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/nameservers/{name}][%d] replaceNameserverOK  %+v", 200, o.Payload)
}

func (o *ReplaceNameserverOK) GetPayload() *models.Nameserver {
	return o.Payload
}

func (o *ReplaceNameserverOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Nameserver)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceNameserverAccepted creates a ReplaceNameserverAccepted with default headers values
func NewReplaceNameserverAccepted() *ReplaceNameserverAccepted {
	return &ReplaceNameserverAccepted{}
}

/*
ReplaceNameserverAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceNameserverAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.Nameserver
}

// IsSuccess returns true when this replace nameserver accepted response has a 2xx status code
func (o *ReplaceNameserverAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace nameserver accepted response has a 3xx status code
func (o *ReplaceNameserverAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace nameserver accepted response has a 4xx status code
func (o *ReplaceNameserverAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace nameserver accepted response has a 5xx status code
func (o *ReplaceNameserverAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this replace nameserver accepted response a status code equal to that given
func (o *ReplaceNameserverAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the replace nameserver accepted response
func (o *ReplaceNameserverAccepted) Code() int {
	return 202
}

func (o *ReplaceNameserverAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/nameservers/{name}][%d] replaceNameserverAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceNameserverAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/nameservers/{name}][%d] replaceNameserverAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceNameserverAccepted) GetPayload() *models.Nameserver {
	return o.Payload
}

func (o *ReplaceNameserverAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.Nameserver)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceNameserverBadRequest creates a ReplaceNameserverBadRequest with default headers values
func NewReplaceNameserverBadRequest() *ReplaceNameserverBadRequest {
	return &ReplaceNameserverBadRequest{}
}

/*
ReplaceNameserverBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceNameserverBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace nameserver bad request response has a 2xx status code
func (o *ReplaceNameserverBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace nameserver bad request response has a 3xx status code
func (o *ReplaceNameserverBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace nameserver bad request response has a 4xx status code
func (o *ReplaceNameserverBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace nameserver bad request response has a 5xx status code
func (o *ReplaceNameserverBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace nameserver bad request response a status code equal to that given
func (o *ReplaceNameserverBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replace nameserver bad request response
func (o *ReplaceNameserverBadRequest) Code() int {
	return 400
}

func (o *ReplaceNameserverBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/nameservers/{name}][%d] replaceNameserverBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceNameserverBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/nameservers/{name}][%d] replaceNameserverBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceNameserverBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceNameserverBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceNameserverNotFound creates a ReplaceNameserverNotFound with default headers values
func NewReplaceNameserverNotFound() *ReplaceNameserverNotFound {
	return &ReplaceNameserverNotFound{}
}

/*
ReplaceNameserverNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type ReplaceNameserverNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace nameserver not found response has a 2xx status code
func (o *ReplaceNameserverNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace nameserver not found response has a 3xx status code
func (o *ReplaceNameserverNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace nameserver not found response has a 4xx status code
func (o *ReplaceNameserverNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace nameserver not found response has a 5xx status code
func (o *ReplaceNameserverNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace nameserver not found response a status code equal to that given
func (o *ReplaceNameserverNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the replace nameserver not found response
func (o *ReplaceNameserverNotFound) Code() int {
	return 404
}

func (o *ReplaceNameserverNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/nameservers/{name}][%d] replaceNameserverNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceNameserverNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/nameservers/{name}][%d] replaceNameserverNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceNameserverNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceNameserverNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceNameserverDefault creates a ReplaceNameserverDefault with default headers values
func NewReplaceNameserverDefault(code int) *ReplaceNameserverDefault {
	return &ReplaceNameserverDefault{
		_statusCode: code,
	}
}

/*
ReplaceNameserverDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceNameserverDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace nameserver default response has a 2xx status code
func (o *ReplaceNameserverDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this replace nameserver default response has a 3xx status code
func (o *ReplaceNameserverDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this replace nameserver default response has a 4xx status code
func (o *ReplaceNameserverDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this replace nameserver default response has a 5xx status code
func (o *ReplaceNameserverDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this replace nameserver default response a status code equal to that given
func (o *ReplaceNameserverDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the replace nameserver default response
func (o *ReplaceNameserverDefault) Code() int {
	return o._statusCode
}

func (o *ReplaceNameserverDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/nameservers/{name}][%d] replaceNameserver default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceNameserverDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/nameservers/{name}][%d] replaceNameserver default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceNameserverDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceNameserverDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
