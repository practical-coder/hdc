// Code generated by go-swagger; DO NOT EDIT.

package mailer_entry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v4/models"
)

// ReplaceMailerEntryReader is a Reader for the ReplaceMailerEntry structure.
type ReplaceMailerEntryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceMailerEntryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceMailerEntryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceMailerEntryAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceMailerEntryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceMailerEntryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceMailerEntryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceMailerEntryOK creates a ReplaceMailerEntryOK with default headers values
func NewReplaceMailerEntryOK() *ReplaceMailerEntryOK {
	return &ReplaceMailerEntryOK{}
}

/*
ReplaceMailerEntryOK describes a response with status code 200, with default header values.

MailerEntry replaced
*/
type ReplaceMailerEntryOK struct {
	Payload *models.MailerEntry
}

// IsSuccess returns true when this replace mailer entry o k response has a 2xx status code
func (o *ReplaceMailerEntryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace mailer entry o k response has a 3xx status code
func (o *ReplaceMailerEntryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace mailer entry o k response has a 4xx status code
func (o *ReplaceMailerEntryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace mailer entry o k response has a 5xx status code
func (o *ReplaceMailerEntryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace mailer entry o k response a status code equal to that given
func (o *ReplaceMailerEntryOK) IsCode(code int) bool {
	return code == 200
}

func (o *ReplaceMailerEntryOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/mailer_entries/{name}][%d] replaceMailerEntryOK  %+v", 200, o.Payload)
}

func (o *ReplaceMailerEntryOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/mailer_entries/{name}][%d] replaceMailerEntryOK  %+v", 200, o.Payload)
}

func (o *ReplaceMailerEntryOK) GetPayload() *models.MailerEntry {
	return o.Payload
}

func (o *ReplaceMailerEntryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MailerEntry)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceMailerEntryAccepted creates a ReplaceMailerEntryAccepted with default headers values
func NewReplaceMailerEntryAccepted() *ReplaceMailerEntryAccepted {
	return &ReplaceMailerEntryAccepted{}
}

/*
ReplaceMailerEntryAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceMailerEntryAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.MailerEntry
}

// IsSuccess returns true when this replace mailer entry accepted response has a 2xx status code
func (o *ReplaceMailerEntryAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace mailer entry accepted response has a 3xx status code
func (o *ReplaceMailerEntryAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace mailer entry accepted response has a 4xx status code
func (o *ReplaceMailerEntryAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace mailer entry accepted response has a 5xx status code
func (o *ReplaceMailerEntryAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this replace mailer entry accepted response a status code equal to that given
func (o *ReplaceMailerEntryAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *ReplaceMailerEntryAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/mailer_entries/{name}][%d] replaceMailerEntryAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceMailerEntryAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/mailer_entries/{name}][%d] replaceMailerEntryAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceMailerEntryAccepted) GetPayload() *models.MailerEntry {
	return o.Payload
}

func (o *ReplaceMailerEntryAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.MailerEntry)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceMailerEntryBadRequest creates a ReplaceMailerEntryBadRequest with default headers values
func NewReplaceMailerEntryBadRequest() *ReplaceMailerEntryBadRequest {
	return &ReplaceMailerEntryBadRequest{}
}

/*
ReplaceMailerEntryBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceMailerEntryBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace mailer entry bad request response has a 2xx status code
func (o *ReplaceMailerEntryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace mailer entry bad request response has a 3xx status code
func (o *ReplaceMailerEntryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace mailer entry bad request response has a 4xx status code
func (o *ReplaceMailerEntryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace mailer entry bad request response has a 5xx status code
func (o *ReplaceMailerEntryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace mailer entry bad request response a status code equal to that given
func (o *ReplaceMailerEntryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ReplaceMailerEntryBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/mailer_entries/{name}][%d] replaceMailerEntryBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceMailerEntryBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/mailer_entries/{name}][%d] replaceMailerEntryBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceMailerEntryBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceMailerEntryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceMailerEntryNotFound creates a ReplaceMailerEntryNotFound with default headers values
func NewReplaceMailerEntryNotFound() *ReplaceMailerEntryNotFound {
	return &ReplaceMailerEntryNotFound{}
}

/*
ReplaceMailerEntryNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type ReplaceMailerEntryNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace mailer entry not found response has a 2xx status code
func (o *ReplaceMailerEntryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace mailer entry not found response has a 3xx status code
func (o *ReplaceMailerEntryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace mailer entry not found response has a 4xx status code
func (o *ReplaceMailerEntryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace mailer entry not found response has a 5xx status code
func (o *ReplaceMailerEntryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace mailer entry not found response a status code equal to that given
func (o *ReplaceMailerEntryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ReplaceMailerEntryNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/mailer_entries/{name}][%d] replaceMailerEntryNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceMailerEntryNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/mailer_entries/{name}][%d] replaceMailerEntryNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceMailerEntryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceMailerEntryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceMailerEntryDefault creates a ReplaceMailerEntryDefault with default headers values
func NewReplaceMailerEntryDefault(code int) *ReplaceMailerEntryDefault {
	return &ReplaceMailerEntryDefault{
		_statusCode: code,
	}
}

/*
ReplaceMailerEntryDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceMailerEntryDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the replace mailer entry default response
func (o *ReplaceMailerEntryDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this replace mailer entry default response has a 2xx status code
func (o *ReplaceMailerEntryDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this replace mailer entry default response has a 3xx status code
func (o *ReplaceMailerEntryDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this replace mailer entry default response has a 4xx status code
func (o *ReplaceMailerEntryDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this replace mailer entry default response has a 5xx status code
func (o *ReplaceMailerEntryDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this replace mailer entry default response a status code equal to that given
func (o *ReplaceMailerEntryDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ReplaceMailerEntryDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/mailer_entries/{name}][%d] replaceMailerEntry default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceMailerEntryDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/mailer_entries/{name}][%d] replaceMailerEntry default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceMailerEntryDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceMailerEntryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
