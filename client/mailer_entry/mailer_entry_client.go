// Code generated by go-swagger; DO NOT EDIT.

package mailer_entry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mailer entry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mailer entry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMailerEntry(params *CreateMailerEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMailerEntryCreated, *CreateMailerEntryAccepted, error)

	DeleteMailerEntry(params *DeleteMailerEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMailerEntryAccepted, *DeleteMailerEntryNoContent, error)

	GetMailerEntries(params *GetMailerEntriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMailerEntriesOK, error)

	GetMailerEntry(params *GetMailerEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMailerEntryOK, error)

	ReplaceMailerEntry(params *ReplaceMailerEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceMailerEntryOK, *ReplaceMailerEntryAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMailerEntry adds a new mailer entry

Adds a new mailer entry to the specified mailers section in the configuration file.
*/
func (a *Client) CreateMailerEntry(params *CreateMailerEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMailerEntryCreated, *CreateMailerEntryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMailerEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMailerEntry",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/mailer_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMailerEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateMailerEntryCreated:
		return value, nil, nil
	case *CreateMailerEntryAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMailerEntryDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMailerEntry deletes a mailer entry

Deletes a mailer entry configuration by it's name in the specified mailers section.
*/
func (a *Client) DeleteMailerEntry(params *DeleteMailerEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMailerEntryAccepted, *DeleteMailerEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMailerEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMailerEntry",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/mailer_entries/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMailerEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteMailerEntryAccepted:
		return value, nil, nil
	case *DeleteMailerEntryNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMailerEntryDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMailerEntries returns an array of mailer entries

Returns an array of all the mailer_entries configured in the specified mailers section.
*/
func (a *Client) GetMailerEntries(params *GetMailerEntriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMailerEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMailerEntriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMailerEntries",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/mailer_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMailerEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMailerEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMailerEntriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMailerEntry returns one mailer entry

Returns one mailer_entry configuration by it's name in the specified mailers section.
*/
func (a *Client) GetMailerEntry(params *GetMailerEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMailerEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMailerEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMailerEntry",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/mailer_entries/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMailerEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMailerEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMailerEntryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReplaceMailerEntry replaces a mailer entry

Replaces a mailer entry configuration by it's name in the specified mailers section.
*/
func (a *Client) ReplaceMailerEntry(params *ReplaceMailerEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceMailerEntryOK, *ReplaceMailerEntryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMailerEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceMailerEntry",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/mailer_entries/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceMailerEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceMailerEntryOK:
		return value, nil, nil
	case *ReplaceMailerEntryAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceMailerEntryDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
