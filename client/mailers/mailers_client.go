// Code generated by go-swagger; DO NOT EDIT.

package mailers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mailers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mailers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMailersSection(params *CreateMailersSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMailersSectionCreated, *CreateMailersSectionAccepted, error)

	DeleteMailersSection(params *DeleteMailersSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMailersSectionAccepted, *DeleteMailersSectionNoContent, error)

	EditMailersSection(params *EditMailersSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditMailersSectionOK, *EditMailersSectionAccepted, error)

	GetMailersSection(params *GetMailersSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMailersSectionOK, error)

	GetMailersSections(params *GetMailersSectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMailersSectionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMailersSection adds a new mailers section

Creates a new empty Mailers section
*/
func (a *Client) CreateMailersSection(params *CreateMailersSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMailersSectionCreated, *CreateMailersSectionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMailersSectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMailersSection",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/mailers_section",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMailersSectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateMailersSectionCreated:
		return value, nil, nil
	case *CreateMailersSectionAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMailersSectionDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMailersSection deletes a mailers section

Deletes a mailers from the configuration by it's name.
*/
func (a *Client) DeleteMailersSection(params *DeleteMailersSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMailersSectionAccepted, *DeleteMailersSectionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMailersSectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMailersSection",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/mailers_section/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMailersSectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteMailersSectionAccepted:
		return value, nil, nil
	case *DeleteMailersSectionNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMailersSectionDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EditMailersSection modifies a mailers section

Modifies a mailers configuration by it's name.
*/
func (a *Client) EditMailersSection(params *EditMailersSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditMailersSectionOK, *EditMailersSectionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditMailersSectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editMailersSection",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/mailers_section/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditMailersSectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EditMailersSectionOK:
		return value, nil, nil
	case *EditMailersSectionAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EditMailersSectionDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMailersSection returns a mailers section

Returns one mailers configuration by it's name.
*/
func (a *Client) GetMailersSection(params *GetMailersSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMailersSectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMailersSectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMailersSection",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/mailers_section/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMailersSectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMailersSectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMailersSectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMailersSections returns an array of mailers sections

Returns an array of all the configured mailers in HAProxy
*/
func (a *Client) GetMailersSections(params *GetMailersSectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMailersSectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMailersSectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMailersSections",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/mailers_section",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMailersSectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMailersSectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMailersSectionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
