// Code generated by go-swagger; DO NOT EDIT.

package cache

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v4/models"
)

// ReplaceCacheReader is a Reader for the ReplaceCache structure.
type ReplaceCacheReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceCacheReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceCacheOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceCacheAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceCacheBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceCacheNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceCacheDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceCacheOK creates a ReplaceCacheOK with default headers values
func NewReplaceCacheOK() *ReplaceCacheOK {
	return &ReplaceCacheOK{}
}

/*
ReplaceCacheOK describes a response with status code 200, with default header values.

Cache replaced
*/
type ReplaceCacheOK struct {
	Payload *models.Cache
}

// IsSuccess returns true when this replace cache o k response has a 2xx status code
func (o *ReplaceCacheOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace cache o k response has a 3xx status code
func (o *ReplaceCacheOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace cache o k response has a 4xx status code
func (o *ReplaceCacheOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace cache o k response has a 5xx status code
func (o *ReplaceCacheOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace cache o k response a status code equal to that given
func (o *ReplaceCacheOK) IsCode(code int) bool {
	return code == 200
}

func (o *ReplaceCacheOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/caches/{name}][%d] replaceCacheOK  %+v", 200, o.Payload)
}

func (o *ReplaceCacheOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/caches/{name}][%d] replaceCacheOK  %+v", 200, o.Payload)
}

func (o *ReplaceCacheOK) GetPayload() *models.Cache {
	return o.Payload
}

func (o *ReplaceCacheOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Cache)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceCacheAccepted creates a ReplaceCacheAccepted with default headers values
func NewReplaceCacheAccepted() *ReplaceCacheAccepted {
	return &ReplaceCacheAccepted{}
}

/*
ReplaceCacheAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceCacheAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.Cache
}

// IsSuccess returns true when this replace cache accepted response has a 2xx status code
func (o *ReplaceCacheAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace cache accepted response has a 3xx status code
func (o *ReplaceCacheAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace cache accepted response has a 4xx status code
func (o *ReplaceCacheAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace cache accepted response has a 5xx status code
func (o *ReplaceCacheAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this replace cache accepted response a status code equal to that given
func (o *ReplaceCacheAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *ReplaceCacheAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/caches/{name}][%d] replaceCacheAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceCacheAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/caches/{name}][%d] replaceCacheAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceCacheAccepted) GetPayload() *models.Cache {
	return o.Payload
}

func (o *ReplaceCacheAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.Cache)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceCacheBadRequest creates a ReplaceCacheBadRequest with default headers values
func NewReplaceCacheBadRequest() *ReplaceCacheBadRequest {
	return &ReplaceCacheBadRequest{}
}

/*
ReplaceCacheBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceCacheBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace cache bad request response has a 2xx status code
func (o *ReplaceCacheBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace cache bad request response has a 3xx status code
func (o *ReplaceCacheBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace cache bad request response has a 4xx status code
func (o *ReplaceCacheBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace cache bad request response has a 5xx status code
func (o *ReplaceCacheBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace cache bad request response a status code equal to that given
func (o *ReplaceCacheBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ReplaceCacheBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/caches/{name}][%d] replaceCacheBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceCacheBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/caches/{name}][%d] replaceCacheBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceCacheBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceCacheBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceCacheNotFound creates a ReplaceCacheNotFound with default headers values
func NewReplaceCacheNotFound() *ReplaceCacheNotFound {
	return &ReplaceCacheNotFound{}
}

/*
ReplaceCacheNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type ReplaceCacheNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace cache not found response has a 2xx status code
func (o *ReplaceCacheNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace cache not found response has a 3xx status code
func (o *ReplaceCacheNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace cache not found response has a 4xx status code
func (o *ReplaceCacheNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace cache not found response has a 5xx status code
func (o *ReplaceCacheNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace cache not found response a status code equal to that given
func (o *ReplaceCacheNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ReplaceCacheNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/caches/{name}][%d] replaceCacheNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceCacheNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/caches/{name}][%d] replaceCacheNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceCacheNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceCacheNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceCacheDefault creates a ReplaceCacheDefault with default headers values
func NewReplaceCacheDefault(code int) *ReplaceCacheDefault {
	return &ReplaceCacheDefault{
		_statusCode: code,
	}
}

/*
ReplaceCacheDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceCacheDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the replace cache default response
func (o *ReplaceCacheDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this replace cache default response has a 2xx status code
func (o *ReplaceCacheDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this replace cache default response has a 3xx status code
func (o *ReplaceCacheDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this replace cache default response has a 4xx status code
func (o *ReplaceCacheDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this replace cache default response has a 5xx status code
func (o *ReplaceCacheDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this replace cache default response a status code equal to that given
func (o *ReplaceCacheDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ReplaceCacheDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/caches/{name}][%d] replaceCache default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceCacheDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/caches/{name}][%d] replaceCache default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceCacheDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceCacheDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
