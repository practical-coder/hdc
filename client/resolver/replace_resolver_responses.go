// Code generated by go-swagger; DO NOT EDIT.

package resolver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// ReplaceResolverReader is a Reader for the ReplaceResolver structure.
type ReplaceResolverReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceResolverReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceResolverOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceResolverAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceResolverBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceResolverNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceResolverDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceResolverOK creates a ReplaceResolverOK with default headers values
func NewReplaceResolverOK() *ReplaceResolverOK {
	return &ReplaceResolverOK{}
}

/*
ReplaceResolverOK describes a response with status code 200, with default header values.

Resolver replaced
*/
type ReplaceResolverOK struct {
	Payload *models.Resolver
}

// IsSuccess returns true when this replace resolver o k response has a 2xx status code
func (o *ReplaceResolverOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace resolver o k response has a 3xx status code
func (o *ReplaceResolverOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace resolver o k response has a 4xx status code
func (o *ReplaceResolverOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace resolver o k response has a 5xx status code
func (o *ReplaceResolverOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace resolver o k response a status code equal to that given
func (o *ReplaceResolverOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replace resolver o k response
func (o *ReplaceResolverOK) Code() int {
	return 200
}

func (o *ReplaceResolverOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/resolvers/{name}][%d] replaceResolverOK  %+v", 200, o.Payload)
}

func (o *ReplaceResolverOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/resolvers/{name}][%d] replaceResolverOK  %+v", 200, o.Payload)
}

func (o *ReplaceResolverOK) GetPayload() *models.Resolver {
	return o.Payload
}

func (o *ReplaceResolverOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Resolver)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceResolverAccepted creates a ReplaceResolverAccepted with default headers values
func NewReplaceResolverAccepted() *ReplaceResolverAccepted {
	return &ReplaceResolverAccepted{}
}

/*
ReplaceResolverAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceResolverAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.Resolver
}

// IsSuccess returns true when this replace resolver accepted response has a 2xx status code
func (o *ReplaceResolverAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace resolver accepted response has a 3xx status code
func (o *ReplaceResolverAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace resolver accepted response has a 4xx status code
func (o *ReplaceResolverAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace resolver accepted response has a 5xx status code
func (o *ReplaceResolverAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this replace resolver accepted response a status code equal to that given
func (o *ReplaceResolverAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the replace resolver accepted response
func (o *ReplaceResolverAccepted) Code() int {
	return 202
}

func (o *ReplaceResolverAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/resolvers/{name}][%d] replaceResolverAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceResolverAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/resolvers/{name}][%d] replaceResolverAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceResolverAccepted) GetPayload() *models.Resolver {
	return o.Payload
}

func (o *ReplaceResolverAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.Resolver)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceResolverBadRequest creates a ReplaceResolverBadRequest with default headers values
func NewReplaceResolverBadRequest() *ReplaceResolverBadRequest {
	return &ReplaceResolverBadRequest{}
}

/*
ReplaceResolverBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceResolverBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace resolver bad request response has a 2xx status code
func (o *ReplaceResolverBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace resolver bad request response has a 3xx status code
func (o *ReplaceResolverBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace resolver bad request response has a 4xx status code
func (o *ReplaceResolverBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace resolver bad request response has a 5xx status code
func (o *ReplaceResolverBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace resolver bad request response a status code equal to that given
func (o *ReplaceResolverBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replace resolver bad request response
func (o *ReplaceResolverBadRequest) Code() int {
	return 400
}

func (o *ReplaceResolverBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/resolvers/{name}][%d] replaceResolverBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceResolverBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/resolvers/{name}][%d] replaceResolverBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceResolverBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceResolverBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceResolverNotFound creates a ReplaceResolverNotFound with default headers values
func NewReplaceResolverNotFound() *ReplaceResolverNotFound {
	return &ReplaceResolverNotFound{}
}

/*
ReplaceResolverNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type ReplaceResolverNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace resolver not found response has a 2xx status code
func (o *ReplaceResolverNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace resolver not found response has a 3xx status code
func (o *ReplaceResolverNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace resolver not found response has a 4xx status code
func (o *ReplaceResolverNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace resolver not found response has a 5xx status code
func (o *ReplaceResolverNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace resolver not found response a status code equal to that given
func (o *ReplaceResolverNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the replace resolver not found response
func (o *ReplaceResolverNotFound) Code() int {
	return 404
}

func (o *ReplaceResolverNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/resolvers/{name}][%d] replaceResolverNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceResolverNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/resolvers/{name}][%d] replaceResolverNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceResolverNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceResolverNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceResolverDefault creates a ReplaceResolverDefault with default headers values
func NewReplaceResolverDefault(code int) *ReplaceResolverDefault {
	return &ReplaceResolverDefault{
		_statusCode: code,
	}
}

/*
ReplaceResolverDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceResolverDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace resolver default response has a 2xx status code
func (o *ReplaceResolverDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this replace resolver default response has a 3xx status code
func (o *ReplaceResolverDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this replace resolver default response has a 4xx status code
func (o *ReplaceResolverDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this replace resolver default response has a 5xx status code
func (o *ReplaceResolverDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this replace resolver default response a status code equal to that given
func (o *ReplaceResolverDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the replace resolver default response
func (o *ReplaceResolverDefault) Code() int {
	return o._statusCode
}

func (o *ReplaceResolverDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/resolvers/{name}][%d] replaceResolver default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceResolverDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/resolvers/{name}][%d] replaceResolver default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceResolverDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceResolverDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
