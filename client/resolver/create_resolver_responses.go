// Code generated by go-swagger; DO NOT EDIT.

package resolver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v4/models"
)

// CreateResolverReader is a Reader for the CreateResolver structure.
type CreateResolverReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateResolverReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateResolverCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateResolverAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateResolverBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateResolverConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateResolverDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateResolverCreated creates a CreateResolverCreated with default headers values
func NewCreateResolverCreated() *CreateResolverCreated {
	return &CreateResolverCreated{}
}

/*
CreateResolverCreated describes a response with status code 201, with default header values.

Resolver created
*/
type CreateResolverCreated struct {
	Payload *models.Resolver
}

// IsSuccess returns true when this create resolver created response has a 2xx status code
func (o *CreateResolverCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create resolver created response has a 3xx status code
func (o *CreateResolverCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create resolver created response has a 4xx status code
func (o *CreateResolverCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create resolver created response has a 5xx status code
func (o *CreateResolverCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create resolver created response a status code equal to that given
func (o *CreateResolverCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateResolverCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverCreated  %+v", 201, o.Payload)
}

func (o *CreateResolverCreated) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverCreated  %+v", 201, o.Payload)
}

func (o *CreateResolverCreated) GetPayload() *models.Resolver {
	return o.Payload
}

func (o *CreateResolverCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Resolver)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResolverAccepted creates a CreateResolverAccepted with default headers values
func NewCreateResolverAccepted() *CreateResolverAccepted {
	return &CreateResolverAccepted{}
}

/*
CreateResolverAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type CreateResolverAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.Resolver
}

// IsSuccess returns true when this create resolver accepted response has a 2xx status code
func (o *CreateResolverAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create resolver accepted response has a 3xx status code
func (o *CreateResolverAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create resolver accepted response has a 4xx status code
func (o *CreateResolverAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this create resolver accepted response has a 5xx status code
func (o *CreateResolverAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this create resolver accepted response a status code equal to that given
func (o *CreateResolverAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *CreateResolverAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverAccepted  %+v", 202, o.Payload)
}

func (o *CreateResolverAccepted) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverAccepted  %+v", 202, o.Payload)
}

func (o *CreateResolverAccepted) GetPayload() *models.Resolver {
	return o.Payload
}

func (o *CreateResolverAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.Resolver)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResolverBadRequest creates a CreateResolverBadRequest with default headers values
func NewCreateResolverBadRequest() *CreateResolverBadRequest {
	return &CreateResolverBadRequest{}
}

/*
CreateResolverBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateResolverBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create resolver bad request response has a 2xx status code
func (o *CreateResolverBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create resolver bad request response has a 3xx status code
func (o *CreateResolverBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create resolver bad request response has a 4xx status code
func (o *CreateResolverBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create resolver bad request response has a 5xx status code
func (o *CreateResolverBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create resolver bad request response a status code equal to that given
func (o *CreateResolverBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateResolverBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverBadRequest  %+v", 400, o.Payload)
}

func (o *CreateResolverBadRequest) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverBadRequest  %+v", 400, o.Payload)
}

func (o *CreateResolverBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateResolverBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResolverConflict creates a CreateResolverConflict with default headers values
func NewCreateResolverConflict() *CreateResolverConflict {
	return &CreateResolverConflict{}
}

/*
CreateResolverConflict describes a response with status code 409, with default header values.

The specified resource already exists
*/
type CreateResolverConflict struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create resolver conflict response has a 2xx status code
func (o *CreateResolverConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create resolver conflict response has a 3xx status code
func (o *CreateResolverConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create resolver conflict response has a 4xx status code
func (o *CreateResolverConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create resolver conflict response has a 5xx status code
func (o *CreateResolverConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create resolver conflict response a status code equal to that given
func (o *CreateResolverConflict) IsCode(code int) bool {
	return code == 409
}

func (o *CreateResolverConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverConflict  %+v", 409, o.Payload)
}

func (o *CreateResolverConflict) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverConflict  %+v", 409, o.Payload)
}

func (o *CreateResolverConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateResolverConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResolverDefault creates a CreateResolverDefault with default headers values
func NewCreateResolverDefault(code int) *CreateResolverDefault {
	return &CreateResolverDefault{
		_statusCode: code,
	}
}

/*
CreateResolverDefault describes a response with status code -1, with default header values.

General Error
*/
type CreateResolverDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the create resolver default response
func (o *CreateResolverDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this create resolver default response has a 2xx status code
func (o *CreateResolverDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create resolver default response has a 3xx status code
func (o *CreateResolverDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create resolver default response has a 4xx status code
func (o *CreateResolverDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create resolver default response has a 5xx status code
func (o *CreateResolverDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create resolver default response a status code equal to that given
func (o *CreateResolverDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *CreateResolverDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolver default  %+v", o._statusCode, o.Payload)
}

func (o *CreateResolverDefault) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolver default  %+v", o._statusCode, o.Payload)
}

func (o *CreateResolverDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateResolverDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
