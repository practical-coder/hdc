// Code generated by go-swagger; DO NOT EDIT.

package backend_switching_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// DeleteBackendSwitchingRuleReader is a Reader for the DeleteBackendSwitchingRule structure.
type DeleteBackendSwitchingRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteBackendSwitchingRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteBackendSwitchingRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteBackendSwitchingRuleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteBackendSwitchingRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteBackendSwitchingRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteBackendSwitchingRuleAccepted creates a DeleteBackendSwitchingRuleAccepted with default headers values
func NewDeleteBackendSwitchingRuleAccepted() *DeleteBackendSwitchingRuleAccepted {
	return &DeleteBackendSwitchingRuleAccepted{}
}

/*
DeleteBackendSwitchingRuleAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type DeleteBackendSwitchingRuleAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string
}

// IsSuccess returns true when this delete backend switching rule accepted response has a 2xx status code
func (o *DeleteBackendSwitchingRuleAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete backend switching rule accepted response has a 3xx status code
func (o *DeleteBackendSwitchingRuleAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete backend switching rule accepted response has a 4xx status code
func (o *DeleteBackendSwitchingRuleAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete backend switching rule accepted response has a 5xx status code
func (o *DeleteBackendSwitchingRuleAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this delete backend switching rule accepted response a status code equal to that given
func (o *DeleteBackendSwitchingRuleAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the delete backend switching rule accepted response
func (o *DeleteBackendSwitchingRuleAccepted) Code() int {
	return 202
}

func (o *DeleteBackendSwitchingRuleAccepted) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/backend_switching_rules/{index}][%d] deleteBackendSwitchingRuleAccepted ", 202)
}

func (o *DeleteBackendSwitchingRuleAccepted) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/backend_switching_rules/{index}][%d] deleteBackendSwitchingRuleAccepted ", 202)
}

func (o *DeleteBackendSwitchingRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	return nil
}

// NewDeleteBackendSwitchingRuleNoContent creates a DeleteBackendSwitchingRuleNoContent with default headers values
func NewDeleteBackendSwitchingRuleNoContent() *DeleteBackendSwitchingRuleNoContent {
	return &DeleteBackendSwitchingRuleNoContent{}
}

/*
DeleteBackendSwitchingRuleNoContent describes a response with status code 204, with default header values.

Backend Switching Rule deleted
*/
type DeleteBackendSwitchingRuleNoContent struct {
}

// IsSuccess returns true when this delete backend switching rule no content response has a 2xx status code
func (o *DeleteBackendSwitchingRuleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete backend switching rule no content response has a 3xx status code
func (o *DeleteBackendSwitchingRuleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete backend switching rule no content response has a 4xx status code
func (o *DeleteBackendSwitchingRuleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete backend switching rule no content response has a 5xx status code
func (o *DeleteBackendSwitchingRuleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete backend switching rule no content response a status code equal to that given
func (o *DeleteBackendSwitchingRuleNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete backend switching rule no content response
func (o *DeleteBackendSwitchingRuleNoContent) Code() int {
	return 204
}

func (o *DeleteBackendSwitchingRuleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/backend_switching_rules/{index}][%d] deleteBackendSwitchingRuleNoContent ", 204)
}

func (o *DeleteBackendSwitchingRuleNoContent) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/backend_switching_rules/{index}][%d] deleteBackendSwitchingRuleNoContent ", 204)
}

func (o *DeleteBackendSwitchingRuleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteBackendSwitchingRuleNotFound creates a DeleteBackendSwitchingRuleNotFound with default headers values
func NewDeleteBackendSwitchingRuleNotFound() *DeleteBackendSwitchingRuleNotFound {
	return &DeleteBackendSwitchingRuleNotFound{}
}

/*
DeleteBackendSwitchingRuleNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type DeleteBackendSwitchingRuleNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this delete backend switching rule not found response has a 2xx status code
func (o *DeleteBackendSwitchingRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete backend switching rule not found response has a 3xx status code
func (o *DeleteBackendSwitchingRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete backend switching rule not found response has a 4xx status code
func (o *DeleteBackendSwitchingRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete backend switching rule not found response has a 5xx status code
func (o *DeleteBackendSwitchingRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete backend switching rule not found response a status code equal to that given
func (o *DeleteBackendSwitchingRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete backend switching rule not found response
func (o *DeleteBackendSwitchingRuleNotFound) Code() int {
	return 404
}

func (o *DeleteBackendSwitchingRuleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/backend_switching_rules/{index}][%d] deleteBackendSwitchingRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteBackendSwitchingRuleNotFound) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/backend_switching_rules/{index}][%d] deleteBackendSwitchingRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteBackendSwitchingRuleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteBackendSwitchingRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBackendSwitchingRuleDefault creates a DeleteBackendSwitchingRuleDefault with default headers values
func NewDeleteBackendSwitchingRuleDefault(code int) *DeleteBackendSwitchingRuleDefault {
	return &DeleteBackendSwitchingRuleDefault{
		_statusCode: code,
	}
}

/*
DeleteBackendSwitchingRuleDefault describes a response with status code -1, with default header values.

General Error
*/
type DeleteBackendSwitchingRuleDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this delete backend switching rule default response has a 2xx status code
func (o *DeleteBackendSwitchingRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete backend switching rule default response has a 3xx status code
func (o *DeleteBackendSwitchingRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete backend switching rule default response has a 4xx status code
func (o *DeleteBackendSwitchingRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete backend switching rule default response has a 5xx status code
func (o *DeleteBackendSwitchingRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete backend switching rule default response a status code equal to that given
func (o *DeleteBackendSwitchingRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete backend switching rule default response
func (o *DeleteBackendSwitchingRuleDefault) Code() int {
	return o._statusCode
}

func (o *DeleteBackendSwitchingRuleDefault) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/backend_switching_rules/{index}][%d] deleteBackendSwitchingRule default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteBackendSwitchingRuleDefault) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/backend_switching_rules/{index}][%d] deleteBackendSwitchingRule default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteBackendSwitchingRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteBackendSwitchingRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
