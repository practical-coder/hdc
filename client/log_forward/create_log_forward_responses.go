// Code generated by go-swagger; DO NOT EDIT.

package log_forward

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// CreateLogForwardReader is a Reader for the CreateLogForward structure.
type CreateLogForwardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateLogForwardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateLogForwardCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateLogForwardAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateLogForwardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateLogForwardConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateLogForwardDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateLogForwardCreated creates a CreateLogForwardCreated with default headers values
func NewCreateLogForwardCreated() *CreateLogForwardCreated {
	return &CreateLogForwardCreated{}
}

/*
CreateLogForwardCreated describes a response with status code 201, with default header values.

Log Forward created
*/
type CreateLogForwardCreated struct {
	Payload *models.LogForward
}

// IsSuccess returns true when this create log forward created response has a 2xx status code
func (o *CreateLogForwardCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create log forward created response has a 3xx status code
func (o *CreateLogForwardCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log forward created response has a 4xx status code
func (o *CreateLogForwardCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create log forward created response has a 5xx status code
func (o *CreateLogForwardCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create log forward created response a status code equal to that given
func (o *CreateLogForwardCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create log forward created response
func (o *CreateLogForwardCreated) Code() int {
	return 201
}

func (o *CreateLogForwardCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_forwards][%d] createLogForwardCreated  %+v", 201, o.Payload)
}

func (o *CreateLogForwardCreated) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_forwards][%d] createLogForwardCreated  %+v", 201, o.Payload)
}

func (o *CreateLogForwardCreated) GetPayload() *models.LogForward {
	return o.Payload
}

func (o *CreateLogForwardCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogForward)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogForwardAccepted creates a CreateLogForwardAccepted with default headers values
func NewCreateLogForwardAccepted() *CreateLogForwardAccepted {
	return &CreateLogForwardAccepted{}
}

/*
CreateLogForwardAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type CreateLogForwardAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.LogForward
}

// IsSuccess returns true when this create log forward accepted response has a 2xx status code
func (o *CreateLogForwardAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create log forward accepted response has a 3xx status code
func (o *CreateLogForwardAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log forward accepted response has a 4xx status code
func (o *CreateLogForwardAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this create log forward accepted response has a 5xx status code
func (o *CreateLogForwardAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this create log forward accepted response a status code equal to that given
func (o *CreateLogForwardAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the create log forward accepted response
func (o *CreateLogForwardAccepted) Code() int {
	return 202
}

func (o *CreateLogForwardAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_forwards][%d] createLogForwardAccepted  %+v", 202, o.Payload)
}

func (o *CreateLogForwardAccepted) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_forwards][%d] createLogForwardAccepted  %+v", 202, o.Payload)
}

func (o *CreateLogForwardAccepted) GetPayload() *models.LogForward {
	return o.Payload
}

func (o *CreateLogForwardAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.LogForward)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogForwardBadRequest creates a CreateLogForwardBadRequest with default headers values
func NewCreateLogForwardBadRequest() *CreateLogForwardBadRequest {
	return &CreateLogForwardBadRequest{}
}

/*
CreateLogForwardBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateLogForwardBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create log forward bad request response has a 2xx status code
func (o *CreateLogForwardBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create log forward bad request response has a 3xx status code
func (o *CreateLogForwardBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log forward bad request response has a 4xx status code
func (o *CreateLogForwardBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create log forward bad request response has a 5xx status code
func (o *CreateLogForwardBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create log forward bad request response a status code equal to that given
func (o *CreateLogForwardBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create log forward bad request response
func (o *CreateLogForwardBadRequest) Code() int {
	return 400
}

func (o *CreateLogForwardBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_forwards][%d] createLogForwardBadRequest  %+v", 400, o.Payload)
}

func (o *CreateLogForwardBadRequest) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_forwards][%d] createLogForwardBadRequest  %+v", 400, o.Payload)
}

func (o *CreateLogForwardBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateLogForwardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogForwardConflict creates a CreateLogForwardConflict with default headers values
func NewCreateLogForwardConflict() *CreateLogForwardConflict {
	return &CreateLogForwardConflict{}
}

/*
CreateLogForwardConflict describes a response with status code 409, with default header values.

The specified resource already exists
*/
type CreateLogForwardConflict struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create log forward conflict response has a 2xx status code
func (o *CreateLogForwardConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create log forward conflict response has a 3xx status code
func (o *CreateLogForwardConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log forward conflict response has a 4xx status code
func (o *CreateLogForwardConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create log forward conflict response has a 5xx status code
func (o *CreateLogForwardConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create log forward conflict response a status code equal to that given
func (o *CreateLogForwardConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create log forward conflict response
func (o *CreateLogForwardConflict) Code() int {
	return 409
}

func (o *CreateLogForwardConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_forwards][%d] createLogForwardConflict  %+v", 409, o.Payload)
}

func (o *CreateLogForwardConflict) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_forwards][%d] createLogForwardConflict  %+v", 409, o.Payload)
}

func (o *CreateLogForwardConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateLogForwardConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogForwardDefault creates a CreateLogForwardDefault with default headers values
func NewCreateLogForwardDefault(code int) *CreateLogForwardDefault {
	return &CreateLogForwardDefault{
		_statusCode: code,
	}
}

/*
CreateLogForwardDefault describes a response with status code -1, with default header values.

General Error
*/
type CreateLogForwardDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create log forward default response has a 2xx status code
func (o *CreateLogForwardDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create log forward default response has a 3xx status code
func (o *CreateLogForwardDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create log forward default response has a 4xx status code
func (o *CreateLogForwardDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create log forward default response has a 5xx status code
func (o *CreateLogForwardDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create log forward default response a status code equal to that given
func (o *CreateLogForwardDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create log forward default response
func (o *CreateLogForwardDefault) Code() int {
	return o._statusCode
}

func (o *CreateLogForwardDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_forwards][%d] createLogForward default  %+v", o._statusCode, o.Payload)
}

func (o *CreateLogForwardDefault) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_forwards][%d] createLogForward default  %+v", o._statusCode, o.Payload)
}

func (o *CreateLogForwardDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateLogForwardDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
