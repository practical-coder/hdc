// Code generated by go-swagger; DO NOT EDIT.

package log_forward

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/haproxytech/client-native/v5/models"
)

// GetLogForwardsReader is a Reader for the GetLogForwards structure.
type GetLogForwardsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogForwardsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLogForwardsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetLogForwardsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLogForwardsOK creates a GetLogForwardsOK with default headers values
func NewGetLogForwardsOK() *GetLogForwardsOK {
	return &GetLogForwardsOK{}
}

/*
GetLogForwardsOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetLogForwardsOK struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *GetLogForwardsOKBody
}

// IsSuccess returns true when this get log forwards o k response has a 2xx status code
func (o *GetLogForwardsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get log forwards o k response has a 3xx status code
func (o *GetLogForwardsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log forwards o k response has a 4xx status code
func (o *GetLogForwardsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get log forwards o k response has a 5xx status code
func (o *GetLogForwardsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get log forwards o k response a status code equal to that given
func (o *GetLogForwardsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get log forwards o k response
func (o *GetLogForwardsOK) Code() int {
	return 200
}

func (o *GetLogForwardsOK) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/configuration/log_forwards][%d] getLogForwardsOK  %+v", 200, o.Payload)
}

func (o *GetLogForwardsOK) String() string {
	return fmt.Sprintf("[GET /services/haproxy/configuration/log_forwards][%d] getLogForwardsOK  %+v", 200, o.Payload)
}

func (o *GetLogForwardsOK) GetPayload() *GetLogForwardsOKBody {
	return o.Payload
}

func (o *GetLogForwardsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(GetLogForwardsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogForwardsDefault creates a GetLogForwardsDefault with default headers values
func NewGetLogForwardsDefault(code int) *GetLogForwardsDefault {
	return &GetLogForwardsDefault{
		_statusCode: code,
	}
}

/*
GetLogForwardsDefault describes a response with status code -1, with default header values.

General Error
*/
type GetLogForwardsDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this get log forwards default response has a 2xx status code
func (o *GetLogForwardsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get log forwards default response has a 3xx status code
func (o *GetLogForwardsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get log forwards default response has a 4xx status code
func (o *GetLogForwardsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get log forwards default response has a 5xx status code
func (o *GetLogForwardsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get log forwards default response a status code equal to that given
func (o *GetLogForwardsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get log forwards default response
func (o *GetLogForwardsDefault) Code() int {
	return o._statusCode
}

func (o *GetLogForwardsDefault) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/configuration/log_forwards][%d] getLogForwards default  %+v", o._statusCode, o.Payload)
}

func (o *GetLogForwardsDefault) String() string {
	return fmt.Sprintf("[GET /services/haproxy/configuration/log_forwards][%d] getLogForwards default  %+v", o._statusCode, o.Payload)
}

func (o *GetLogForwardsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLogForwardsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetLogForwardsOKBody get log forwards o k body
swagger:model GetLogForwardsOKBody
*/
type GetLogForwardsOKBody struct {

	// version
	Version int64 `json:"_version,omitempty"`

	// data
	// Required: true
	Data models.LogForwards `json:"data"`
}

// Validate validates this get log forwards o k body
func (o *GetLogForwardsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetLogForwardsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getLogForwardsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if err := o.Data.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getLogForwardsOK" + "." + "data")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getLogForwardsOK" + "." + "data")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get log forwards o k body based on the context it is used
func (o *GetLogForwardsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetLogForwardsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Data.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getLogForwardsOK" + "." + "data")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getLogForwardsOK" + "." + "data")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetLogForwardsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLogForwardsOKBody) UnmarshalBinary(b []byte) error {
	var res GetLogForwardsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
