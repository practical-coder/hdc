// Code generated by go-swagger; DO NOT EDIT.

package log_forward

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// DeleteLogForwardReader is a Reader for the DeleteLogForward structure.
type DeleteLogForwardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLogForwardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteLogForwardAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteLogForwardNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteLogForwardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteLogForwardDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteLogForwardAccepted creates a DeleteLogForwardAccepted with default headers values
func NewDeleteLogForwardAccepted() *DeleteLogForwardAccepted {
	return &DeleteLogForwardAccepted{}
}

/*
DeleteLogForwardAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type DeleteLogForwardAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string
}

// IsSuccess returns true when this delete log forward accepted response has a 2xx status code
func (o *DeleteLogForwardAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete log forward accepted response has a 3xx status code
func (o *DeleteLogForwardAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log forward accepted response has a 4xx status code
func (o *DeleteLogForwardAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete log forward accepted response has a 5xx status code
func (o *DeleteLogForwardAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log forward accepted response a status code equal to that given
func (o *DeleteLogForwardAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the delete log forward accepted response
func (o *DeleteLogForwardAccepted) Code() int {
	return 202
}

func (o *DeleteLogForwardAccepted) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/log_forwards/{name}][%d] deleteLogForwardAccepted ", 202)
}

func (o *DeleteLogForwardAccepted) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/log_forwards/{name}][%d] deleteLogForwardAccepted ", 202)
}

func (o *DeleteLogForwardAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	return nil
}

// NewDeleteLogForwardNoContent creates a DeleteLogForwardNoContent with default headers values
func NewDeleteLogForwardNoContent() *DeleteLogForwardNoContent {
	return &DeleteLogForwardNoContent{}
}

/*
DeleteLogForwardNoContent describes a response with status code 204, with default header values.

Log Forward deleted
*/
type DeleteLogForwardNoContent struct {
}

// IsSuccess returns true when this delete log forward no content response has a 2xx status code
func (o *DeleteLogForwardNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete log forward no content response has a 3xx status code
func (o *DeleteLogForwardNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log forward no content response has a 4xx status code
func (o *DeleteLogForwardNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete log forward no content response has a 5xx status code
func (o *DeleteLogForwardNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log forward no content response a status code equal to that given
func (o *DeleteLogForwardNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete log forward no content response
func (o *DeleteLogForwardNoContent) Code() int {
	return 204
}

func (o *DeleteLogForwardNoContent) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/log_forwards/{name}][%d] deleteLogForwardNoContent ", 204)
}

func (o *DeleteLogForwardNoContent) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/log_forwards/{name}][%d] deleteLogForwardNoContent ", 204)
}

func (o *DeleteLogForwardNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteLogForwardNotFound creates a DeleteLogForwardNotFound with default headers values
func NewDeleteLogForwardNotFound() *DeleteLogForwardNotFound {
	return &DeleteLogForwardNotFound{}
}

/*
DeleteLogForwardNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type DeleteLogForwardNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this delete log forward not found response has a 2xx status code
func (o *DeleteLogForwardNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log forward not found response has a 3xx status code
func (o *DeleteLogForwardNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log forward not found response has a 4xx status code
func (o *DeleteLogForwardNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete log forward not found response has a 5xx status code
func (o *DeleteLogForwardNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log forward not found response a status code equal to that given
func (o *DeleteLogForwardNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete log forward not found response
func (o *DeleteLogForwardNotFound) Code() int {
	return 404
}

func (o *DeleteLogForwardNotFound) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/log_forwards/{name}][%d] deleteLogForwardNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogForwardNotFound) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/log_forwards/{name}][%d] deleteLogForwardNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogForwardNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteLogForwardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogForwardDefault creates a DeleteLogForwardDefault with default headers values
func NewDeleteLogForwardDefault(code int) *DeleteLogForwardDefault {
	return &DeleteLogForwardDefault{
		_statusCode: code,
	}
}

/*
DeleteLogForwardDefault describes a response with status code -1, with default header values.

General Error
*/
type DeleteLogForwardDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this delete log forward default response has a 2xx status code
func (o *DeleteLogForwardDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete log forward default response has a 3xx status code
func (o *DeleteLogForwardDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete log forward default response has a 4xx status code
func (o *DeleteLogForwardDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete log forward default response has a 5xx status code
func (o *DeleteLogForwardDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete log forward default response a status code equal to that given
func (o *DeleteLogForwardDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete log forward default response
func (o *DeleteLogForwardDefault) Code() int {
	return o._statusCode
}

func (o *DeleteLogForwardDefault) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/log_forwards/{name}][%d] deleteLogForward default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteLogForwardDefault) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/log_forwards/{name}][%d] deleteLogForward default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteLogForwardDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteLogForwardDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
