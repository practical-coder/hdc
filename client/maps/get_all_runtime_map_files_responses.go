// Code generated by go-swagger; DO NOT EDIT.

package maps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// GetAllRuntimeMapFilesReader is a Reader for the GetAllRuntimeMapFiles structure.
type GetAllRuntimeMapFilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllRuntimeMapFilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllRuntimeMapFilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetAllRuntimeMapFilesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetAllRuntimeMapFilesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAllRuntimeMapFilesOK creates a GetAllRuntimeMapFilesOK with default headers values
func NewGetAllRuntimeMapFilesOK() *GetAllRuntimeMapFilesOK {
	return &GetAllRuntimeMapFilesOK{}
}

/*
GetAllRuntimeMapFilesOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetAllRuntimeMapFilesOK struct {
	Payload models.Maps
}

// IsSuccess returns true when this get all runtime map files o k response has a 2xx status code
func (o *GetAllRuntimeMapFilesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all runtime map files o k response has a 3xx status code
func (o *GetAllRuntimeMapFilesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all runtime map files o k response has a 4xx status code
func (o *GetAllRuntimeMapFilesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all runtime map files o k response has a 5xx status code
func (o *GetAllRuntimeMapFilesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all runtime map files o k response a status code equal to that given
func (o *GetAllRuntimeMapFilesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all runtime map files o k response
func (o *GetAllRuntimeMapFilesOK) Code() int {
	return 200
}

func (o *GetAllRuntimeMapFilesOK) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/runtime/maps][%d] getAllRuntimeMapFilesOK  %+v", 200, o.Payload)
}

func (o *GetAllRuntimeMapFilesOK) String() string {
	return fmt.Sprintf("[GET /services/haproxy/runtime/maps][%d] getAllRuntimeMapFilesOK  %+v", 200, o.Payload)
}

func (o *GetAllRuntimeMapFilesOK) GetPayload() models.Maps {
	return o.Payload
}

func (o *GetAllRuntimeMapFilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRuntimeMapFilesNotFound creates a GetAllRuntimeMapFilesNotFound with default headers values
func NewGetAllRuntimeMapFilesNotFound() *GetAllRuntimeMapFilesNotFound {
	return &GetAllRuntimeMapFilesNotFound{}
}

/*
GetAllRuntimeMapFilesNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type GetAllRuntimeMapFilesNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this get all runtime map files not found response has a 2xx status code
func (o *GetAllRuntimeMapFilesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all runtime map files not found response has a 3xx status code
func (o *GetAllRuntimeMapFilesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all runtime map files not found response has a 4xx status code
func (o *GetAllRuntimeMapFilesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all runtime map files not found response has a 5xx status code
func (o *GetAllRuntimeMapFilesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all runtime map files not found response a status code equal to that given
func (o *GetAllRuntimeMapFilesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all runtime map files not found response
func (o *GetAllRuntimeMapFilesNotFound) Code() int {
	return 404
}

func (o *GetAllRuntimeMapFilesNotFound) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/runtime/maps][%d] getAllRuntimeMapFilesNotFound  %+v", 404, o.Payload)
}

func (o *GetAllRuntimeMapFilesNotFound) String() string {
	return fmt.Sprintf("[GET /services/haproxy/runtime/maps][%d] getAllRuntimeMapFilesNotFound  %+v", 404, o.Payload)
}

func (o *GetAllRuntimeMapFilesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRuntimeMapFilesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRuntimeMapFilesDefault creates a GetAllRuntimeMapFilesDefault with default headers values
func NewGetAllRuntimeMapFilesDefault(code int) *GetAllRuntimeMapFilesDefault {
	return &GetAllRuntimeMapFilesDefault{
		_statusCode: code,
	}
}

/*
GetAllRuntimeMapFilesDefault describes a response with status code -1, with default header values.

General Error
*/
type GetAllRuntimeMapFilesDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this get all runtime map files default response has a 2xx status code
func (o *GetAllRuntimeMapFilesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get all runtime map files default response has a 3xx status code
func (o *GetAllRuntimeMapFilesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get all runtime map files default response has a 4xx status code
func (o *GetAllRuntimeMapFilesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get all runtime map files default response has a 5xx status code
func (o *GetAllRuntimeMapFilesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get all runtime map files default response a status code equal to that given
func (o *GetAllRuntimeMapFilesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get all runtime map files default response
func (o *GetAllRuntimeMapFilesDefault) Code() int {
	return o._statusCode
}

func (o *GetAllRuntimeMapFilesDefault) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/runtime/maps][%d] getAllRuntimeMapFiles default  %+v", o._statusCode, o.Payload)
}

func (o *GetAllRuntimeMapFilesDefault) String() string {
	return fmt.Sprintf("[GET /services/haproxy/runtime/maps][%d] getAllRuntimeMapFiles default  %+v", o._statusCode, o.Payload)
}

func (o *GetAllRuntimeMapFilesDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRuntimeMapFilesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
