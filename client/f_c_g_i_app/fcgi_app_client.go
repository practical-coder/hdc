// Code generated by go-swagger; DO NOT EDIT.

package f_c_g_i_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new f c g i app API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for f c g i app API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFCGIApp(params *CreateFCGIAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFCGIAppCreated, *CreateFCGIAppAccepted, error)

	DeleteFCGIApp(params *DeleteFCGIAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFCGIAppAccepted, *DeleteFCGIAppNoContent, error)

	GetFCGIApp(params *GetFCGIAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFCGIAppOK, error)

	GetFCGIApps(params *GetFCGIAppsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFCGIAppsOK, error)

	ReplaceFCGIApp(params *ReplaceFCGIAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceFCGIAppOK, *ReplaceFCGIAppAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateFCGIApp adds an f c g i app

Adds a new FCGI application to the configuration file.
*/
func (a *Client) CreateFCGIApp(params *CreateFCGIAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFCGIAppCreated, *CreateFCGIAppAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFCGIAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFCGIApp",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/fcgi_apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateFCGIAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateFCGIAppCreated:
		return value, nil, nil
	case *CreateFCGIAppAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateFCGIAppDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteFCGIApp deletes an f c g i app

Deletes an FCGI application from the configuration by its name.
*/
func (a *Client) DeleteFCGIApp(params *DeleteFCGIAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFCGIAppAccepted, *DeleteFCGIAppNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFCGIAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFCGIApp",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/fcgi_apps/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFCGIAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteFCGIAppAccepted:
		return value, nil, nil
	case *DeleteFCGIAppNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFCGIAppDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFCGIApp returns a f c g i app

Returns one FCGI application configuration by its name.
*/
func (a *Client) GetFCGIApp(params *GetFCGIAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFCGIAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFCGIAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFCGIApp",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/fcgi_apps/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFCGIAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFCGIAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFCGIAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFCGIApps returns an array of f c g i apps

Returns an array of all configured FCGI applications.
*/
func (a *Client) GetFCGIApps(params *GetFCGIAppsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFCGIAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFCGIAppsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFCGIApps",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/fcgi_apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFCGIAppsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFCGIAppsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFCGIAppsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReplaceFCGIApp replaces a f c g i app

Replaces a FCGI application configuration by its name.
*/
func (a *Client) ReplaceFCGIApp(params *ReplaceFCGIAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceFCGIAppOK, *ReplaceFCGIAppAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFCGIAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceFCGIApp",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/fcgi_apps/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceFCGIAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceFCGIAppOK:
		return value, nil, nil
	case *ReplaceFCGIAppAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceFCGIAppDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
