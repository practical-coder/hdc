// Code generated by go-swagger; DO NOT EDIT.

package f_c_g_i_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/haproxytech/client-native/v4/models"
)

// NewCreateFCGIAppParams creates a new CreateFCGIAppParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateFCGIAppParams() *CreateFCGIAppParams {
	return &CreateFCGIAppParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateFCGIAppParamsWithTimeout creates a new CreateFCGIAppParams object
// with the ability to set a timeout on a request.
func NewCreateFCGIAppParamsWithTimeout(timeout time.Duration) *CreateFCGIAppParams {
	return &CreateFCGIAppParams{
		timeout: timeout,
	}
}

// NewCreateFCGIAppParamsWithContext creates a new CreateFCGIAppParams object
// with the ability to set a context for a request.
func NewCreateFCGIAppParamsWithContext(ctx context.Context) *CreateFCGIAppParams {
	return &CreateFCGIAppParams{
		Context: ctx,
	}
}

// NewCreateFCGIAppParamsWithHTTPClient creates a new CreateFCGIAppParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateFCGIAppParamsWithHTTPClient(client *http.Client) *CreateFCGIAppParams {
	return &CreateFCGIAppParams{
		HTTPClient: client,
	}
}

/*
CreateFCGIAppParams contains all the parameters to send to the API endpoint

	for the create f c g i app operation.

	Typically these are written to a http.Request.
*/
type CreateFCGIAppParams struct {

	// Data.
	Data *models.FcgiApp

	/* ForceReload.

	   If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	*/
	ForceReload *bool

	/* TransactionID.

	   ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	*/
	TransactionID *string

	/* Version.

	   Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	*/
	Version *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create f c g i app params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateFCGIAppParams) WithDefaults() *CreateFCGIAppParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create f c g i app params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateFCGIAppParams) SetDefaults() {
	var (
		forceReloadDefault = bool(false)
	)

	val := CreateFCGIAppParams{
		ForceReload: &forceReloadDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create f c g i app params
func (o *CreateFCGIAppParams) WithTimeout(timeout time.Duration) *CreateFCGIAppParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create f c g i app params
func (o *CreateFCGIAppParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create f c g i app params
func (o *CreateFCGIAppParams) WithContext(ctx context.Context) *CreateFCGIAppParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create f c g i app params
func (o *CreateFCGIAppParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create f c g i app params
func (o *CreateFCGIAppParams) WithHTTPClient(client *http.Client) *CreateFCGIAppParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create f c g i app params
func (o *CreateFCGIAppParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithData adds the data to the create f c g i app params
func (o *CreateFCGIAppParams) WithData(data *models.FcgiApp) *CreateFCGIAppParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the create f c g i app params
func (o *CreateFCGIAppParams) SetData(data *models.FcgiApp) {
	o.Data = data
}

// WithForceReload adds the forceReload to the create f c g i app params
func (o *CreateFCGIAppParams) WithForceReload(forceReload *bool) *CreateFCGIAppParams {
	o.SetForceReload(forceReload)
	return o
}

// SetForceReload adds the forceReload to the create f c g i app params
func (o *CreateFCGIAppParams) SetForceReload(forceReload *bool) {
	o.ForceReload = forceReload
}

// WithTransactionID adds the transactionID to the create f c g i app params
func (o *CreateFCGIAppParams) WithTransactionID(transactionID *string) *CreateFCGIAppParams {
	o.SetTransactionID(transactionID)
	return o
}

// SetTransactionID adds the transactionId to the create f c g i app params
func (o *CreateFCGIAppParams) SetTransactionID(transactionID *string) {
	o.TransactionID = transactionID
}

// WithVersion adds the version to the create f c g i app params
func (o *CreateFCGIAppParams) WithVersion(version *int64) *CreateFCGIAppParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the create f c g i app params
func (o *CreateFCGIAppParams) SetVersion(version *int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *CreateFCGIAppParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Data != nil {
		if err := r.SetBodyParam(o.Data); err != nil {
			return err
		}
	}

	if o.ForceReload != nil {

		// query param force_reload
		var qrForceReload bool

		if o.ForceReload != nil {
			qrForceReload = *o.ForceReload
		}
		qForceReload := swag.FormatBool(qrForceReload)
		if qForceReload != "" {

			if err := r.SetQueryParam("force_reload", qForceReload); err != nil {
				return err
			}
		}
	}

	if o.TransactionID != nil {

		// query param transaction_id
		var qrTransactionID string

		if o.TransactionID != nil {
			qrTransactionID = *o.TransactionID
		}
		qTransactionID := qrTransactionID
		if qTransactionID != "" {

			if err := r.SetQueryParam("transaction_id", qTransactionID); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion int64

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt64(qrVersion)
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
