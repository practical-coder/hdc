// Code generated by go-swagger; DO NOT EDIT.

package f_c_g_i_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// ReplaceFCGIAppReader is a Reader for the ReplaceFCGIApp structure.
type ReplaceFCGIAppReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceFCGIAppReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceFCGIAppOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceFCGIAppAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceFCGIAppBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceFCGIAppNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceFCGIAppDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceFCGIAppOK creates a ReplaceFCGIAppOK with default headers values
func NewReplaceFCGIAppOK() *ReplaceFCGIAppOK {
	return &ReplaceFCGIAppOK{}
}

/*
ReplaceFCGIAppOK describes a response with status code 200, with default header values.

Application replaced
*/
type ReplaceFCGIAppOK struct {
	Payload *models.FcgiApp
}

// IsSuccess returns true when this replace f c g i app o k response has a 2xx status code
func (o *ReplaceFCGIAppOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace f c g i app o k response has a 3xx status code
func (o *ReplaceFCGIAppOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace f c g i app o k response has a 4xx status code
func (o *ReplaceFCGIAppOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace f c g i app o k response has a 5xx status code
func (o *ReplaceFCGIAppOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace f c g i app o k response a status code equal to that given
func (o *ReplaceFCGIAppOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replace f c g i app o k response
func (o *ReplaceFCGIAppOK) Code() int {
	return 200
}

func (o *ReplaceFCGIAppOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/fcgi_apps/{name}][%d] replaceFCGIAppOK  %+v", 200, o.Payload)
}

func (o *ReplaceFCGIAppOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/fcgi_apps/{name}][%d] replaceFCGIAppOK  %+v", 200, o.Payload)
}

func (o *ReplaceFCGIAppOK) GetPayload() *models.FcgiApp {
	return o.Payload
}

func (o *ReplaceFCGIAppOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FcgiApp)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceFCGIAppAccepted creates a ReplaceFCGIAppAccepted with default headers values
func NewReplaceFCGIAppAccepted() *ReplaceFCGIAppAccepted {
	return &ReplaceFCGIAppAccepted{}
}

/*
ReplaceFCGIAppAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceFCGIAppAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.FcgiApp
}

// IsSuccess returns true when this replace f c g i app accepted response has a 2xx status code
func (o *ReplaceFCGIAppAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace f c g i app accepted response has a 3xx status code
func (o *ReplaceFCGIAppAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace f c g i app accepted response has a 4xx status code
func (o *ReplaceFCGIAppAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace f c g i app accepted response has a 5xx status code
func (o *ReplaceFCGIAppAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this replace f c g i app accepted response a status code equal to that given
func (o *ReplaceFCGIAppAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the replace f c g i app accepted response
func (o *ReplaceFCGIAppAccepted) Code() int {
	return 202
}

func (o *ReplaceFCGIAppAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/fcgi_apps/{name}][%d] replaceFCGIAppAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceFCGIAppAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/fcgi_apps/{name}][%d] replaceFCGIAppAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceFCGIAppAccepted) GetPayload() *models.FcgiApp {
	return o.Payload
}

func (o *ReplaceFCGIAppAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.FcgiApp)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceFCGIAppBadRequest creates a ReplaceFCGIAppBadRequest with default headers values
func NewReplaceFCGIAppBadRequest() *ReplaceFCGIAppBadRequest {
	return &ReplaceFCGIAppBadRequest{}
}

/*
ReplaceFCGIAppBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceFCGIAppBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace f c g i app bad request response has a 2xx status code
func (o *ReplaceFCGIAppBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace f c g i app bad request response has a 3xx status code
func (o *ReplaceFCGIAppBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace f c g i app bad request response has a 4xx status code
func (o *ReplaceFCGIAppBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace f c g i app bad request response has a 5xx status code
func (o *ReplaceFCGIAppBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace f c g i app bad request response a status code equal to that given
func (o *ReplaceFCGIAppBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replace f c g i app bad request response
func (o *ReplaceFCGIAppBadRequest) Code() int {
	return 400
}

func (o *ReplaceFCGIAppBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/fcgi_apps/{name}][%d] replaceFCGIAppBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceFCGIAppBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/fcgi_apps/{name}][%d] replaceFCGIAppBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceFCGIAppBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceFCGIAppBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceFCGIAppNotFound creates a ReplaceFCGIAppNotFound with default headers values
func NewReplaceFCGIAppNotFound() *ReplaceFCGIAppNotFound {
	return &ReplaceFCGIAppNotFound{}
}

/*
ReplaceFCGIAppNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type ReplaceFCGIAppNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace f c g i app not found response has a 2xx status code
func (o *ReplaceFCGIAppNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace f c g i app not found response has a 3xx status code
func (o *ReplaceFCGIAppNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace f c g i app not found response has a 4xx status code
func (o *ReplaceFCGIAppNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace f c g i app not found response has a 5xx status code
func (o *ReplaceFCGIAppNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace f c g i app not found response a status code equal to that given
func (o *ReplaceFCGIAppNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the replace f c g i app not found response
func (o *ReplaceFCGIAppNotFound) Code() int {
	return 404
}

func (o *ReplaceFCGIAppNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/fcgi_apps/{name}][%d] replaceFCGIAppNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceFCGIAppNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/fcgi_apps/{name}][%d] replaceFCGIAppNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceFCGIAppNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceFCGIAppNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceFCGIAppDefault creates a ReplaceFCGIAppDefault with default headers values
func NewReplaceFCGIAppDefault(code int) *ReplaceFCGIAppDefault {
	return &ReplaceFCGIAppDefault{
		_statusCode: code,
	}
}

/*
ReplaceFCGIAppDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceFCGIAppDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace f c g i app default response has a 2xx status code
func (o *ReplaceFCGIAppDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this replace f c g i app default response has a 3xx status code
func (o *ReplaceFCGIAppDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this replace f c g i app default response has a 4xx status code
func (o *ReplaceFCGIAppDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this replace f c g i app default response has a 5xx status code
func (o *ReplaceFCGIAppDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this replace f c g i app default response a status code equal to that given
func (o *ReplaceFCGIAppDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the replace f c g i app default response
func (o *ReplaceFCGIAppDefault) Code() int {
	return o._statusCode
}

func (o *ReplaceFCGIAppDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/fcgi_apps/{name}][%d] replaceFCGIApp default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceFCGIAppDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/fcgi_apps/{name}][%d] replaceFCGIApp default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceFCGIAppDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceFCGIAppDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
