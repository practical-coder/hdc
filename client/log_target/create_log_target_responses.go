// Code generated by go-swagger; DO NOT EDIT.

package log_target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v4/models"
)

// CreateLogTargetReader is a Reader for the CreateLogTarget structure.
type CreateLogTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateLogTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateLogTargetCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateLogTargetAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateLogTargetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateLogTargetConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateLogTargetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateLogTargetCreated creates a CreateLogTargetCreated with default headers values
func NewCreateLogTargetCreated() *CreateLogTargetCreated {
	return &CreateLogTargetCreated{}
}

/*
CreateLogTargetCreated describes a response with status code 201, with default header values.

Log Target created
*/
type CreateLogTargetCreated struct {
	Payload *models.LogTarget
}

// IsSuccess returns true when this create log target created response has a 2xx status code
func (o *CreateLogTargetCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create log target created response has a 3xx status code
func (o *CreateLogTargetCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log target created response has a 4xx status code
func (o *CreateLogTargetCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create log target created response has a 5xx status code
func (o *CreateLogTargetCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create log target created response a status code equal to that given
func (o *CreateLogTargetCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateLogTargetCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_targets][%d] createLogTargetCreated  %+v", 201, o.Payload)
}

func (o *CreateLogTargetCreated) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_targets][%d] createLogTargetCreated  %+v", 201, o.Payload)
}

func (o *CreateLogTargetCreated) GetPayload() *models.LogTarget {
	return o.Payload
}

func (o *CreateLogTargetCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogTarget)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogTargetAccepted creates a CreateLogTargetAccepted with default headers values
func NewCreateLogTargetAccepted() *CreateLogTargetAccepted {
	return &CreateLogTargetAccepted{}
}

/*
CreateLogTargetAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type CreateLogTargetAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.LogTarget
}

// IsSuccess returns true when this create log target accepted response has a 2xx status code
func (o *CreateLogTargetAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create log target accepted response has a 3xx status code
func (o *CreateLogTargetAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log target accepted response has a 4xx status code
func (o *CreateLogTargetAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this create log target accepted response has a 5xx status code
func (o *CreateLogTargetAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this create log target accepted response a status code equal to that given
func (o *CreateLogTargetAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *CreateLogTargetAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_targets][%d] createLogTargetAccepted  %+v", 202, o.Payload)
}

func (o *CreateLogTargetAccepted) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_targets][%d] createLogTargetAccepted  %+v", 202, o.Payload)
}

func (o *CreateLogTargetAccepted) GetPayload() *models.LogTarget {
	return o.Payload
}

func (o *CreateLogTargetAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.LogTarget)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogTargetBadRequest creates a CreateLogTargetBadRequest with default headers values
func NewCreateLogTargetBadRequest() *CreateLogTargetBadRequest {
	return &CreateLogTargetBadRequest{}
}

/*
CreateLogTargetBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateLogTargetBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create log target bad request response has a 2xx status code
func (o *CreateLogTargetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create log target bad request response has a 3xx status code
func (o *CreateLogTargetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log target bad request response has a 4xx status code
func (o *CreateLogTargetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create log target bad request response has a 5xx status code
func (o *CreateLogTargetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create log target bad request response a status code equal to that given
func (o *CreateLogTargetBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateLogTargetBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_targets][%d] createLogTargetBadRequest  %+v", 400, o.Payload)
}

func (o *CreateLogTargetBadRequest) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_targets][%d] createLogTargetBadRequest  %+v", 400, o.Payload)
}

func (o *CreateLogTargetBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateLogTargetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogTargetConflict creates a CreateLogTargetConflict with default headers values
func NewCreateLogTargetConflict() *CreateLogTargetConflict {
	return &CreateLogTargetConflict{}
}

/*
CreateLogTargetConflict describes a response with status code 409, with default header values.

The specified resource already exists
*/
type CreateLogTargetConflict struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this create log target conflict response has a 2xx status code
func (o *CreateLogTargetConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create log target conflict response has a 3xx status code
func (o *CreateLogTargetConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log target conflict response has a 4xx status code
func (o *CreateLogTargetConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create log target conflict response has a 5xx status code
func (o *CreateLogTargetConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create log target conflict response a status code equal to that given
func (o *CreateLogTargetConflict) IsCode(code int) bool {
	return code == 409
}

func (o *CreateLogTargetConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_targets][%d] createLogTargetConflict  %+v", 409, o.Payload)
}

func (o *CreateLogTargetConflict) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_targets][%d] createLogTargetConflict  %+v", 409, o.Payload)
}

func (o *CreateLogTargetConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateLogTargetConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogTargetDefault creates a CreateLogTargetDefault with default headers values
func NewCreateLogTargetDefault(code int) *CreateLogTargetDefault {
	return &CreateLogTargetDefault{
		_statusCode: code,
	}
}

/*
CreateLogTargetDefault describes a response with status code -1, with default header values.

General Error
*/
type CreateLogTargetDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the create log target default response
func (o *CreateLogTargetDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this create log target default response has a 2xx status code
func (o *CreateLogTargetDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create log target default response has a 3xx status code
func (o *CreateLogTargetDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create log target default response has a 4xx status code
func (o *CreateLogTargetDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create log target default response has a 5xx status code
func (o *CreateLogTargetDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create log target default response a status code equal to that given
func (o *CreateLogTargetDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *CreateLogTargetDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_targets][%d] createLogTarget default  %+v", o._statusCode, o.Payload)
}

func (o *CreateLogTargetDefault) String() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/log_targets][%d] createLogTarget default  %+v", o._statusCode, o.Payload)
}

func (o *CreateLogTargetDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateLogTargetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
