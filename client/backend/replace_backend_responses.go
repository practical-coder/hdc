// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v4/models"
)

// ReplaceBackendReader is a Reader for the ReplaceBackend structure.
type ReplaceBackendReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceBackendReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceBackendOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceBackendAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceBackendBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceBackendNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceBackendDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceBackendOK creates a ReplaceBackendOK with default headers values
func NewReplaceBackendOK() *ReplaceBackendOK {
	return &ReplaceBackendOK{}
}

/*
ReplaceBackendOK describes a response with status code 200, with default header values.

Backend replaced
*/
type ReplaceBackendOK struct {
	Payload *models.Backend
}

// IsSuccess returns true when this replace backend o k response has a 2xx status code
func (o *ReplaceBackendOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace backend o k response has a 3xx status code
func (o *ReplaceBackendOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace backend o k response has a 4xx status code
func (o *ReplaceBackendOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace backend o k response has a 5xx status code
func (o *ReplaceBackendOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace backend o k response a status code equal to that given
func (o *ReplaceBackendOK) IsCode(code int) bool {
	return code == 200
}

func (o *ReplaceBackendOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/backends/{name}][%d] replaceBackendOK  %+v", 200, o.Payload)
}

func (o *ReplaceBackendOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/backends/{name}][%d] replaceBackendOK  %+v", 200, o.Payload)
}

func (o *ReplaceBackendOK) GetPayload() *models.Backend {
	return o.Payload
}

func (o *ReplaceBackendOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Backend)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceBackendAccepted creates a ReplaceBackendAccepted with default headers values
func NewReplaceBackendAccepted() *ReplaceBackendAccepted {
	return &ReplaceBackendAccepted{}
}

/*
ReplaceBackendAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceBackendAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.Backend
}

// IsSuccess returns true when this replace backend accepted response has a 2xx status code
func (o *ReplaceBackendAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace backend accepted response has a 3xx status code
func (o *ReplaceBackendAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace backend accepted response has a 4xx status code
func (o *ReplaceBackendAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace backend accepted response has a 5xx status code
func (o *ReplaceBackendAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this replace backend accepted response a status code equal to that given
func (o *ReplaceBackendAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *ReplaceBackendAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/backends/{name}][%d] replaceBackendAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceBackendAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/backends/{name}][%d] replaceBackendAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceBackendAccepted) GetPayload() *models.Backend {
	return o.Payload
}

func (o *ReplaceBackendAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.Backend)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceBackendBadRequest creates a ReplaceBackendBadRequest with default headers values
func NewReplaceBackendBadRequest() *ReplaceBackendBadRequest {
	return &ReplaceBackendBadRequest{}
}

/*
ReplaceBackendBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceBackendBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace backend bad request response has a 2xx status code
func (o *ReplaceBackendBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace backend bad request response has a 3xx status code
func (o *ReplaceBackendBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace backend bad request response has a 4xx status code
func (o *ReplaceBackendBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace backend bad request response has a 5xx status code
func (o *ReplaceBackendBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace backend bad request response a status code equal to that given
func (o *ReplaceBackendBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ReplaceBackendBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/backends/{name}][%d] replaceBackendBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceBackendBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/backends/{name}][%d] replaceBackendBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceBackendBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceBackendBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceBackendNotFound creates a ReplaceBackendNotFound with default headers values
func NewReplaceBackendNotFound() *ReplaceBackendNotFound {
	return &ReplaceBackendNotFound{}
}

/*
ReplaceBackendNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type ReplaceBackendNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace backend not found response has a 2xx status code
func (o *ReplaceBackendNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace backend not found response has a 3xx status code
func (o *ReplaceBackendNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace backend not found response has a 4xx status code
func (o *ReplaceBackendNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace backend not found response has a 5xx status code
func (o *ReplaceBackendNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace backend not found response a status code equal to that given
func (o *ReplaceBackendNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ReplaceBackendNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/backends/{name}][%d] replaceBackendNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceBackendNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/backends/{name}][%d] replaceBackendNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceBackendNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceBackendNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceBackendDefault creates a ReplaceBackendDefault with default headers values
func NewReplaceBackendDefault(code int) *ReplaceBackendDefault {
	return &ReplaceBackendDefault{
		_statusCode: code,
	}
}

/*
ReplaceBackendDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceBackendDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the replace backend default response
func (o *ReplaceBackendDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this replace backend default response has a 2xx status code
func (o *ReplaceBackendDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this replace backend default response has a 3xx status code
func (o *ReplaceBackendDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this replace backend default response has a 4xx status code
func (o *ReplaceBackendDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this replace backend default response has a 5xx status code
func (o *ReplaceBackendDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this replace backend default response a status code equal to that given
func (o *ReplaceBackendDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ReplaceBackendDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/backends/{name}][%d] replaceBackend default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceBackendDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/backends/{name}][%d] replaceBackend default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceBackendDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceBackendDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
