// Code generated by go-swagger; DO NOT EDIT.

package http_request_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// ReplaceHTTPRequestRuleReader is a Reader for the ReplaceHTTPRequestRule structure.
type ReplaceHTTPRequestRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceHTTPRequestRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceHTTPRequestRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceHTTPRequestRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceHTTPRequestRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceHTTPRequestRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceHTTPRequestRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceHTTPRequestRuleOK creates a ReplaceHTTPRequestRuleOK with default headers values
func NewReplaceHTTPRequestRuleOK() *ReplaceHTTPRequestRuleOK {
	return &ReplaceHTTPRequestRuleOK{}
}

/*
ReplaceHTTPRequestRuleOK describes a response with status code 200, with default header values.

HTTP Request Rule replaced
*/
type ReplaceHTTPRequestRuleOK struct {
	Payload *models.HTTPRequestRule
}

// IsSuccess returns true when this replace Http request rule o k response has a 2xx status code
func (o *ReplaceHTTPRequestRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace Http request rule o k response has a 3xx status code
func (o *ReplaceHTTPRequestRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http request rule o k response has a 4xx status code
func (o *ReplaceHTTPRequestRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace Http request rule o k response has a 5xx status code
func (o *ReplaceHTTPRequestRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http request rule o k response a status code equal to that given
func (o *ReplaceHTTPRequestRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replace Http request rule o k response
func (o *ReplaceHTTPRequestRuleOK) Code() int {
	return 200
}

func (o *ReplaceHTTPRequestRuleOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_request_rules/{index}][%d] replaceHttpRequestRuleOK  %+v", 200, o.Payload)
}

func (o *ReplaceHTTPRequestRuleOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_request_rules/{index}][%d] replaceHttpRequestRuleOK  %+v", 200, o.Payload)
}

func (o *ReplaceHTTPRequestRuleOK) GetPayload() *models.HTTPRequestRule {
	return o.Payload
}

func (o *ReplaceHTTPRequestRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPRequestRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPRequestRuleAccepted creates a ReplaceHTTPRequestRuleAccepted with default headers values
func NewReplaceHTTPRequestRuleAccepted() *ReplaceHTTPRequestRuleAccepted {
	return &ReplaceHTTPRequestRuleAccepted{}
}

/*
ReplaceHTTPRequestRuleAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceHTTPRequestRuleAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.HTTPRequestRule
}

// IsSuccess returns true when this replace Http request rule accepted response has a 2xx status code
func (o *ReplaceHTTPRequestRuleAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace Http request rule accepted response has a 3xx status code
func (o *ReplaceHTTPRequestRuleAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http request rule accepted response has a 4xx status code
func (o *ReplaceHTTPRequestRuleAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace Http request rule accepted response has a 5xx status code
func (o *ReplaceHTTPRequestRuleAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http request rule accepted response a status code equal to that given
func (o *ReplaceHTTPRequestRuleAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the replace Http request rule accepted response
func (o *ReplaceHTTPRequestRuleAccepted) Code() int {
	return 202
}

func (o *ReplaceHTTPRequestRuleAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_request_rules/{index}][%d] replaceHttpRequestRuleAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceHTTPRequestRuleAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_request_rules/{index}][%d] replaceHttpRequestRuleAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceHTTPRequestRuleAccepted) GetPayload() *models.HTTPRequestRule {
	return o.Payload
}

func (o *ReplaceHTTPRequestRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.HTTPRequestRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPRequestRuleBadRequest creates a ReplaceHTTPRequestRuleBadRequest with default headers values
func NewReplaceHTTPRequestRuleBadRequest() *ReplaceHTTPRequestRuleBadRequest {
	return &ReplaceHTTPRequestRuleBadRequest{}
}

/*
ReplaceHTTPRequestRuleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceHTTPRequestRuleBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace Http request rule bad request response has a 2xx status code
func (o *ReplaceHTTPRequestRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace Http request rule bad request response has a 3xx status code
func (o *ReplaceHTTPRequestRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http request rule bad request response has a 4xx status code
func (o *ReplaceHTTPRequestRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace Http request rule bad request response has a 5xx status code
func (o *ReplaceHTTPRequestRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http request rule bad request response a status code equal to that given
func (o *ReplaceHTTPRequestRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replace Http request rule bad request response
func (o *ReplaceHTTPRequestRuleBadRequest) Code() int {
	return 400
}

func (o *ReplaceHTTPRequestRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_request_rules/{index}][%d] replaceHttpRequestRuleBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceHTTPRequestRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_request_rules/{index}][%d] replaceHttpRequestRuleBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceHTTPRequestRuleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPRequestRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPRequestRuleNotFound creates a ReplaceHTTPRequestRuleNotFound with default headers values
func NewReplaceHTTPRequestRuleNotFound() *ReplaceHTTPRequestRuleNotFound {
	return &ReplaceHTTPRequestRuleNotFound{}
}

/*
ReplaceHTTPRequestRuleNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type ReplaceHTTPRequestRuleNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace Http request rule not found response has a 2xx status code
func (o *ReplaceHTTPRequestRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace Http request rule not found response has a 3xx status code
func (o *ReplaceHTTPRequestRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http request rule not found response has a 4xx status code
func (o *ReplaceHTTPRequestRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace Http request rule not found response has a 5xx status code
func (o *ReplaceHTTPRequestRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http request rule not found response a status code equal to that given
func (o *ReplaceHTTPRequestRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the replace Http request rule not found response
func (o *ReplaceHTTPRequestRuleNotFound) Code() int {
	return 404
}

func (o *ReplaceHTTPRequestRuleNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_request_rules/{index}][%d] replaceHttpRequestRuleNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceHTTPRequestRuleNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_request_rules/{index}][%d] replaceHttpRequestRuleNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceHTTPRequestRuleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPRequestRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPRequestRuleDefault creates a ReplaceHTTPRequestRuleDefault with default headers values
func NewReplaceHTTPRequestRuleDefault(code int) *ReplaceHTTPRequestRuleDefault {
	return &ReplaceHTTPRequestRuleDefault{
		_statusCode: code,
	}
}

/*
ReplaceHTTPRequestRuleDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceHTTPRequestRuleDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace HTTP request rule default response has a 2xx status code
func (o *ReplaceHTTPRequestRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this replace HTTP request rule default response has a 3xx status code
func (o *ReplaceHTTPRequestRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this replace HTTP request rule default response has a 4xx status code
func (o *ReplaceHTTPRequestRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this replace HTTP request rule default response has a 5xx status code
func (o *ReplaceHTTPRequestRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this replace HTTP request rule default response a status code equal to that given
func (o *ReplaceHTTPRequestRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the replace HTTP request rule default response
func (o *ReplaceHTTPRequestRuleDefault) Code() int {
	return o._statusCode
}

func (o *ReplaceHTTPRequestRuleDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_request_rules/{index}][%d] replaceHTTPRequestRule default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceHTTPRequestRuleDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_request_rules/{index}][%d] replaceHTTPRequestRule default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceHTTPRequestRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPRequestRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
