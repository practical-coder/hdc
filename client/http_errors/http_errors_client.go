// Code generated by go-swagger; DO NOT EDIT.

package http_errors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new http errors API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for http errors API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateHTTPErrorsSection(params *CreateHTTPErrorsSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateHTTPErrorsSectionCreated, *CreateHTTPErrorsSectionAccepted, error)

	DeleteHTTPErrorsSection(params *DeleteHTTPErrorsSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteHTTPErrorsSectionAccepted, *DeleteHTTPErrorsSectionNoContent, error)

	GetHTTPErrorsSection(params *GetHTTPErrorsSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHTTPErrorsSectionOK, error)

	GetHTTPErrorsSections(params *GetHTTPErrorsSectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHTTPErrorsSectionsOK, error)

	ReplaceHTTPErrorsSection(params *ReplaceHTTPErrorsSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceHTTPErrorsSectionOK, *ReplaceHTTPErrorsSectionAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateHTTPErrorsSection adds a new http error section

Adds a new http-error section to the configuration.
*/
func (a *Client) CreateHTTPErrorsSection(params *CreateHTTPErrorsSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateHTTPErrorsSectionCreated, *CreateHTTPErrorsSectionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHTTPErrorsSectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createHTTPErrorsSection",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/http_errors_sections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHTTPErrorsSectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateHTTPErrorsSectionCreated:
		return value, nil, nil
	case *CreateHTTPErrorsSectionAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateHTTPErrorsSectionDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteHTTPErrorsSection deletes a http error section

Deletes a http-error section with a given name from the configuration.
*/
func (a *Client) DeleteHTTPErrorsSection(params *DeleteHTTPErrorsSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteHTTPErrorsSectionAccepted, *DeleteHTTPErrorsSectionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHTTPErrorsSectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteHTTPErrorsSection",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/http_errors_sections/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteHTTPErrorsSectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteHTTPErrorsSectionAccepted:
		return value, nil, nil
	case *DeleteHTTPErrorsSectionNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHTTPErrorsSectionDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHTTPErrorsSection returns a http error section

Returns one http-error section with a given name from the configuration.
*/
func (a *Client) GetHTTPErrorsSection(params *GetHTTPErrorsSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHTTPErrorsSectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHTTPErrorsSectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHTTPErrorsSection",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/http_errors_sections/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHTTPErrorsSectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHTTPErrorsSectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHTTPErrorsSectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHTTPErrorsSections returns an array of http error sections

Returns an array of all configured http-error sections.
*/
func (a *Client) GetHTTPErrorsSections(params *GetHTTPErrorsSectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHTTPErrorsSectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHTTPErrorsSectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHTTPErrorsSections",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/http_errors_sections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHTTPErrorsSectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHTTPErrorsSectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHTTPErrorsSectionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReplaceHTTPErrorsSection replaces a http error section

Replaces a http-error section with a given name in the configuration.
*/
func (a *Client) ReplaceHTTPErrorsSection(params *ReplaceHTTPErrorsSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceHTTPErrorsSectionOK, *ReplaceHTTPErrorsSectionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceHTTPErrorsSectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceHTTPErrorsSection",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/http_errors_sections/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceHTTPErrorsSectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceHTTPErrorsSectionOK:
		return value, nil, nil
	case *ReplaceHTTPErrorsSectionAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceHTTPErrorsSectionDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
