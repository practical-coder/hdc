// Code generated by go-swagger; DO NOT EDIT.

package http_errors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// ReplaceHTTPErrorsSectionReader is a Reader for the ReplaceHTTPErrorsSection structure.
type ReplaceHTTPErrorsSectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceHTTPErrorsSectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceHTTPErrorsSectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceHTTPErrorsSectionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceHTTPErrorsSectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceHTTPErrorsSectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceHTTPErrorsSectionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceHTTPErrorsSectionOK creates a ReplaceHTTPErrorsSectionOK with default headers values
func NewReplaceHTTPErrorsSectionOK() *ReplaceHTTPErrorsSectionOK {
	return &ReplaceHTTPErrorsSectionOK{}
}

/*
ReplaceHTTPErrorsSectionOK describes a response with status code 200, with default header values.

http-error section updated
*/
type ReplaceHTTPErrorsSectionOK struct {
	Payload *models.HTTPErrorsSection
}

// IsSuccess returns true when this replace Http errors section o k response has a 2xx status code
func (o *ReplaceHTTPErrorsSectionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace Http errors section o k response has a 3xx status code
func (o *ReplaceHTTPErrorsSectionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http errors section o k response has a 4xx status code
func (o *ReplaceHTTPErrorsSectionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace Http errors section o k response has a 5xx status code
func (o *ReplaceHTTPErrorsSectionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http errors section o k response a status code equal to that given
func (o *ReplaceHTTPErrorsSectionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replace Http errors section o k response
func (o *ReplaceHTTPErrorsSectionOK) Code() int {
	return 200
}

func (o *ReplaceHTTPErrorsSectionOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_errors_sections/{name}][%d] replaceHttpErrorsSectionOK  %+v", 200, o.Payload)
}

func (o *ReplaceHTTPErrorsSectionOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_errors_sections/{name}][%d] replaceHttpErrorsSectionOK  %+v", 200, o.Payload)
}

func (o *ReplaceHTTPErrorsSectionOK) GetPayload() *models.HTTPErrorsSection {
	return o.Payload
}

func (o *ReplaceHTTPErrorsSectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorsSection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPErrorsSectionAccepted creates a ReplaceHTTPErrorsSectionAccepted with default headers values
func NewReplaceHTTPErrorsSectionAccepted() *ReplaceHTTPErrorsSectionAccepted {
	return &ReplaceHTTPErrorsSectionAccepted{}
}

/*
ReplaceHTTPErrorsSectionAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceHTTPErrorsSectionAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.HTTPErrorsSection
}

// IsSuccess returns true when this replace Http errors section accepted response has a 2xx status code
func (o *ReplaceHTTPErrorsSectionAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace Http errors section accepted response has a 3xx status code
func (o *ReplaceHTTPErrorsSectionAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http errors section accepted response has a 4xx status code
func (o *ReplaceHTTPErrorsSectionAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace Http errors section accepted response has a 5xx status code
func (o *ReplaceHTTPErrorsSectionAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http errors section accepted response a status code equal to that given
func (o *ReplaceHTTPErrorsSectionAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the replace Http errors section accepted response
func (o *ReplaceHTTPErrorsSectionAccepted) Code() int {
	return 202
}

func (o *ReplaceHTTPErrorsSectionAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_errors_sections/{name}][%d] replaceHttpErrorsSectionAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceHTTPErrorsSectionAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_errors_sections/{name}][%d] replaceHttpErrorsSectionAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceHTTPErrorsSectionAccepted) GetPayload() *models.HTTPErrorsSection {
	return o.Payload
}

func (o *ReplaceHTTPErrorsSectionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.HTTPErrorsSection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPErrorsSectionBadRequest creates a ReplaceHTTPErrorsSectionBadRequest with default headers values
func NewReplaceHTTPErrorsSectionBadRequest() *ReplaceHTTPErrorsSectionBadRequest {
	return &ReplaceHTTPErrorsSectionBadRequest{}
}

/*
ReplaceHTTPErrorsSectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceHTTPErrorsSectionBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace Http errors section bad request response has a 2xx status code
func (o *ReplaceHTTPErrorsSectionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace Http errors section bad request response has a 3xx status code
func (o *ReplaceHTTPErrorsSectionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http errors section bad request response has a 4xx status code
func (o *ReplaceHTTPErrorsSectionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace Http errors section bad request response has a 5xx status code
func (o *ReplaceHTTPErrorsSectionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http errors section bad request response a status code equal to that given
func (o *ReplaceHTTPErrorsSectionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replace Http errors section bad request response
func (o *ReplaceHTTPErrorsSectionBadRequest) Code() int {
	return 400
}

func (o *ReplaceHTTPErrorsSectionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_errors_sections/{name}][%d] replaceHttpErrorsSectionBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceHTTPErrorsSectionBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_errors_sections/{name}][%d] replaceHttpErrorsSectionBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceHTTPErrorsSectionBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPErrorsSectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPErrorsSectionNotFound creates a ReplaceHTTPErrorsSectionNotFound with default headers values
func NewReplaceHTTPErrorsSectionNotFound() *ReplaceHTTPErrorsSectionNotFound {
	return &ReplaceHTTPErrorsSectionNotFound{}
}

/*
ReplaceHTTPErrorsSectionNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type ReplaceHTTPErrorsSectionNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace Http errors section not found response has a 2xx status code
func (o *ReplaceHTTPErrorsSectionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace Http errors section not found response has a 3xx status code
func (o *ReplaceHTTPErrorsSectionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http errors section not found response has a 4xx status code
func (o *ReplaceHTTPErrorsSectionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace Http errors section not found response has a 5xx status code
func (o *ReplaceHTTPErrorsSectionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http errors section not found response a status code equal to that given
func (o *ReplaceHTTPErrorsSectionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the replace Http errors section not found response
func (o *ReplaceHTTPErrorsSectionNotFound) Code() int {
	return 404
}

func (o *ReplaceHTTPErrorsSectionNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_errors_sections/{name}][%d] replaceHttpErrorsSectionNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceHTTPErrorsSectionNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_errors_sections/{name}][%d] replaceHttpErrorsSectionNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceHTTPErrorsSectionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPErrorsSectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPErrorsSectionDefault creates a ReplaceHTTPErrorsSectionDefault with default headers values
func NewReplaceHTTPErrorsSectionDefault(code int) *ReplaceHTTPErrorsSectionDefault {
	return &ReplaceHTTPErrorsSectionDefault{
		_statusCode: code,
	}
}

/*
ReplaceHTTPErrorsSectionDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceHTTPErrorsSectionDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace HTTP errors section default response has a 2xx status code
func (o *ReplaceHTTPErrorsSectionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this replace HTTP errors section default response has a 3xx status code
func (o *ReplaceHTTPErrorsSectionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this replace HTTP errors section default response has a 4xx status code
func (o *ReplaceHTTPErrorsSectionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this replace HTTP errors section default response has a 5xx status code
func (o *ReplaceHTTPErrorsSectionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this replace HTTP errors section default response a status code equal to that given
func (o *ReplaceHTTPErrorsSectionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the replace HTTP errors section default response
func (o *ReplaceHTTPErrorsSectionDefault) Code() int {
	return o._statusCode
}

func (o *ReplaceHTTPErrorsSectionDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_errors_sections/{name}][%d] replaceHTTPErrorsSection default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceHTTPErrorsSectionDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_errors_sections/{name}][%d] replaceHTTPErrorsSection default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceHTTPErrorsSectionDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPErrorsSectionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
