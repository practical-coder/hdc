// Code generated by go-swagger; DO NOT EDIT.

package http_errors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v4/models"
)

// DeleteHTTPErrorsSectionReader is a Reader for the DeleteHTTPErrorsSection structure.
type DeleteHTTPErrorsSectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteHTTPErrorsSectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteHTTPErrorsSectionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteHTTPErrorsSectionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteHTTPErrorsSectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteHTTPErrorsSectionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteHTTPErrorsSectionAccepted creates a DeleteHTTPErrorsSectionAccepted with default headers values
func NewDeleteHTTPErrorsSectionAccepted() *DeleteHTTPErrorsSectionAccepted {
	return &DeleteHTTPErrorsSectionAccepted{}
}

/*
DeleteHTTPErrorsSectionAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type DeleteHTTPErrorsSectionAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string
}

// IsSuccess returns true when this delete Http errors section accepted response has a 2xx status code
func (o *DeleteHTTPErrorsSectionAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete Http errors section accepted response has a 3xx status code
func (o *DeleteHTTPErrorsSectionAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete Http errors section accepted response has a 4xx status code
func (o *DeleteHTTPErrorsSectionAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete Http errors section accepted response has a 5xx status code
func (o *DeleteHTTPErrorsSectionAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this delete Http errors section accepted response a status code equal to that given
func (o *DeleteHTTPErrorsSectionAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *DeleteHTTPErrorsSectionAccepted) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_errors_sections/{name}][%d] deleteHttpErrorsSectionAccepted ", 202)
}

func (o *DeleteHTTPErrorsSectionAccepted) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_errors_sections/{name}][%d] deleteHttpErrorsSectionAccepted ", 202)
}

func (o *DeleteHTTPErrorsSectionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	return nil
}

// NewDeleteHTTPErrorsSectionNoContent creates a DeleteHTTPErrorsSectionNoContent with default headers values
func NewDeleteHTTPErrorsSectionNoContent() *DeleteHTTPErrorsSectionNoContent {
	return &DeleteHTTPErrorsSectionNoContent{}
}

/*
DeleteHTTPErrorsSectionNoContent describes a response with status code 204, with default header values.

http-error section deleted
*/
type DeleteHTTPErrorsSectionNoContent struct {
}

// IsSuccess returns true when this delete Http errors section no content response has a 2xx status code
func (o *DeleteHTTPErrorsSectionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete Http errors section no content response has a 3xx status code
func (o *DeleteHTTPErrorsSectionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete Http errors section no content response has a 4xx status code
func (o *DeleteHTTPErrorsSectionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete Http errors section no content response has a 5xx status code
func (o *DeleteHTTPErrorsSectionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete Http errors section no content response a status code equal to that given
func (o *DeleteHTTPErrorsSectionNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteHTTPErrorsSectionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_errors_sections/{name}][%d] deleteHttpErrorsSectionNoContent ", 204)
}

func (o *DeleteHTTPErrorsSectionNoContent) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_errors_sections/{name}][%d] deleteHttpErrorsSectionNoContent ", 204)
}

func (o *DeleteHTTPErrorsSectionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteHTTPErrorsSectionNotFound creates a DeleteHTTPErrorsSectionNotFound with default headers values
func NewDeleteHTTPErrorsSectionNotFound() *DeleteHTTPErrorsSectionNotFound {
	return &DeleteHTTPErrorsSectionNotFound{}
}

/*
DeleteHTTPErrorsSectionNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type DeleteHTTPErrorsSectionNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this delete Http errors section not found response has a 2xx status code
func (o *DeleteHTTPErrorsSectionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete Http errors section not found response has a 3xx status code
func (o *DeleteHTTPErrorsSectionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete Http errors section not found response has a 4xx status code
func (o *DeleteHTTPErrorsSectionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete Http errors section not found response has a 5xx status code
func (o *DeleteHTTPErrorsSectionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete Http errors section not found response a status code equal to that given
func (o *DeleteHTTPErrorsSectionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteHTTPErrorsSectionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_errors_sections/{name}][%d] deleteHttpErrorsSectionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteHTTPErrorsSectionNotFound) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_errors_sections/{name}][%d] deleteHttpErrorsSectionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteHTTPErrorsSectionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteHTTPErrorsSectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteHTTPErrorsSectionDefault creates a DeleteHTTPErrorsSectionDefault with default headers values
func NewDeleteHTTPErrorsSectionDefault(code int) *DeleteHTTPErrorsSectionDefault {
	return &DeleteHTTPErrorsSectionDefault{
		_statusCode: code,
	}
}

/*
DeleteHTTPErrorsSectionDefault describes a response with status code -1, with default header values.

General Error
*/
type DeleteHTTPErrorsSectionDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the delete HTTP errors section default response
func (o *DeleteHTTPErrorsSectionDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this delete HTTP errors section default response has a 2xx status code
func (o *DeleteHTTPErrorsSectionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete HTTP errors section default response has a 3xx status code
func (o *DeleteHTTPErrorsSectionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete HTTP errors section default response has a 4xx status code
func (o *DeleteHTTPErrorsSectionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete HTTP errors section default response has a 5xx status code
func (o *DeleteHTTPErrorsSectionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete HTTP errors section default response a status code equal to that given
func (o *DeleteHTTPErrorsSectionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *DeleteHTTPErrorsSectionDefault) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_errors_sections/{name}][%d] deleteHTTPErrorsSection default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteHTTPErrorsSectionDefault) String() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/http_errors_sections/{name}][%d] deleteHTTPErrorsSection default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteHTTPErrorsSectionDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteHTTPErrorsSectionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
