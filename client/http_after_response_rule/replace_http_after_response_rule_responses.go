// Code generated by go-swagger; DO NOT EDIT.

package http_after_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v4/models"
)

// ReplaceHTTPAfterResponseRuleReader is a Reader for the ReplaceHTTPAfterResponseRule structure.
type ReplaceHTTPAfterResponseRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceHTTPAfterResponseRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceHTTPAfterResponseRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceHTTPAfterResponseRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceHTTPAfterResponseRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceHTTPAfterResponseRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceHTTPAfterResponseRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceHTTPAfterResponseRuleOK creates a ReplaceHTTPAfterResponseRuleOK with default headers values
func NewReplaceHTTPAfterResponseRuleOK() *ReplaceHTTPAfterResponseRuleOK {
	return &ReplaceHTTPAfterResponseRuleOK{}
}

/*
ReplaceHTTPAfterResponseRuleOK describes a response with status code 200, with default header values.

HTTP After Response Rule replaced
*/
type ReplaceHTTPAfterResponseRuleOK struct {
	Payload *models.HTTPAfterResponseRule
}

// IsSuccess returns true when this replace Http after response rule o k response has a 2xx status code
func (o *ReplaceHTTPAfterResponseRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace Http after response rule o k response has a 3xx status code
func (o *ReplaceHTTPAfterResponseRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http after response rule o k response has a 4xx status code
func (o *ReplaceHTTPAfterResponseRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace Http after response rule o k response has a 5xx status code
func (o *ReplaceHTTPAfterResponseRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http after response rule o k response a status code equal to that given
func (o *ReplaceHTTPAfterResponseRuleOK) IsCode(code int) bool {
	return code == 200
}

func (o *ReplaceHTTPAfterResponseRuleOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_after_response_rules/{index}][%d] replaceHttpAfterResponseRuleOK  %+v", 200, o.Payload)
}

func (o *ReplaceHTTPAfterResponseRuleOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_after_response_rules/{index}][%d] replaceHttpAfterResponseRuleOK  %+v", 200, o.Payload)
}

func (o *ReplaceHTTPAfterResponseRuleOK) GetPayload() *models.HTTPAfterResponseRule {
	return o.Payload
}

func (o *ReplaceHTTPAfterResponseRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAfterResponseRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPAfterResponseRuleAccepted creates a ReplaceHTTPAfterResponseRuleAccepted with default headers values
func NewReplaceHTTPAfterResponseRuleAccepted() *ReplaceHTTPAfterResponseRuleAccepted {
	return &ReplaceHTTPAfterResponseRuleAccepted{}
}

/*
ReplaceHTTPAfterResponseRuleAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceHTTPAfterResponseRuleAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.HTTPAfterResponseRule
}

// IsSuccess returns true when this replace Http after response rule accepted response has a 2xx status code
func (o *ReplaceHTTPAfterResponseRuleAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace Http after response rule accepted response has a 3xx status code
func (o *ReplaceHTTPAfterResponseRuleAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http after response rule accepted response has a 4xx status code
func (o *ReplaceHTTPAfterResponseRuleAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace Http after response rule accepted response has a 5xx status code
func (o *ReplaceHTTPAfterResponseRuleAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http after response rule accepted response a status code equal to that given
func (o *ReplaceHTTPAfterResponseRuleAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *ReplaceHTTPAfterResponseRuleAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_after_response_rules/{index}][%d] replaceHttpAfterResponseRuleAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceHTTPAfterResponseRuleAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_after_response_rules/{index}][%d] replaceHttpAfterResponseRuleAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceHTTPAfterResponseRuleAccepted) GetPayload() *models.HTTPAfterResponseRule {
	return o.Payload
}

func (o *ReplaceHTTPAfterResponseRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.HTTPAfterResponseRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPAfterResponseRuleBadRequest creates a ReplaceHTTPAfterResponseRuleBadRequest with default headers values
func NewReplaceHTTPAfterResponseRuleBadRequest() *ReplaceHTTPAfterResponseRuleBadRequest {
	return &ReplaceHTTPAfterResponseRuleBadRequest{}
}

/*
ReplaceHTTPAfterResponseRuleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceHTTPAfterResponseRuleBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace Http after response rule bad request response has a 2xx status code
func (o *ReplaceHTTPAfterResponseRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace Http after response rule bad request response has a 3xx status code
func (o *ReplaceHTTPAfterResponseRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http after response rule bad request response has a 4xx status code
func (o *ReplaceHTTPAfterResponseRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace Http after response rule bad request response has a 5xx status code
func (o *ReplaceHTTPAfterResponseRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http after response rule bad request response a status code equal to that given
func (o *ReplaceHTTPAfterResponseRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ReplaceHTTPAfterResponseRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_after_response_rules/{index}][%d] replaceHttpAfterResponseRuleBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceHTTPAfterResponseRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_after_response_rules/{index}][%d] replaceHttpAfterResponseRuleBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceHTTPAfterResponseRuleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPAfterResponseRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPAfterResponseRuleNotFound creates a ReplaceHTTPAfterResponseRuleNotFound with default headers values
func NewReplaceHTTPAfterResponseRuleNotFound() *ReplaceHTTPAfterResponseRuleNotFound {
	return &ReplaceHTTPAfterResponseRuleNotFound{}
}

/*
ReplaceHTTPAfterResponseRuleNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type ReplaceHTTPAfterResponseRuleNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace Http after response rule not found response has a 2xx status code
func (o *ReplaceHTTPAfterResponseRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace Http after response rule not found response has a 3xx status code
func (o *ReplaceHTTPAfterResponseRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace Http after response rule not found response has a 4xx status code
func (o *ReplaceHTTPAfterResponseRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace Http after response rule not found response has a 5xx status code
func (o *ReplaceHTTPAfterResponseRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace Http after response rule not found response a status code equal to that given
func (o *ReplaceHTTPAfterResponseRuleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ReplaceHTTPAfterResponseRuleNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_after_response_rules/{index}][%d] replaceHttpAfterResponseRuleNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceHTTPAfterResponseRuleNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_after_response_rules/{index}][%d] replaceHttpAfterResponseRuleNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceHTTPAfterResponseRuleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPAfterResponseRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceHTTPAfterResponseRuleDefault creates a ReplaceHTTPAfterResponseRuleDefault with default headers values
func NewReplaceHTTPAfterResponseRuleDefault(code int) *ReplaceHTTPAfterResponseRuleDefault {
	return &ReplaceHTTPAfterResponseRuleDefault{
		_statusCode: code,
	}
}

/*
ReplaceHTTPAfterResponseRuleDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceHTTPAfterResponseRuleDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the replace HTTP after response rule default response
func (o *ReplaceHTTPAfterResponseRuleDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this replace HTTP after response rule default response has a 2xx status code
func (o *ReplaceHTTPAfterResponseRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this replace HTTP after response rule default response has a 3xx status code
func (o *ReplaceHTTPAfterResponseRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this replace HTTP after response rule default response has a 4xx status code
func (o *ReplaceHTTPAfterResponseRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this replace HTTP after response rule default response has a 5xx status code
func (o *ReplaceHTTPAfterResponseRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this replace HTTP after response rule default response a status code equal to that given
func (o *ReplaceHTTPAfterResponseRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ReplaceHTTPAfterResponseRuleDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_after_response_rules/{index}][%d] replaceHTTPAfterResponseRule default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceHTTPAfterResponseRuleDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/http_after_response_rules/{index}][%d] replaceHTTPAfterResponseRule default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceHTTPAfterResponseRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceHTTPAfterResponseRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
