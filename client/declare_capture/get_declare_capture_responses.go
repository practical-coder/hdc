// Code generated by go-swagger; DO NOT EDIT.

package declare_capture

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/haproxytech/client-native/v3/models"
)

// GetDeclareCaptureReader is a Reader for the GetDeclareCapture structure.
type GetDeclareCaptureReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeclareCaptureReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeclareCaptureOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetDeclareCaptureNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetDeclareCaptureDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDeclareCaptureOK creates a GetDeclareCaptureOK with default headers values
func NewGetDeclareCaptureOK() *GetDeclareCaptureOK {
	return &GetDeclareCaptureOK{}
}

/*GetDeclareCaptureOK handles this case with default header values.

Successful operation
*/
type GetDeclareCaptureOK struct {
	/*Configuration file version
	 */
	ConfigurationVersion string

	Payload *GetDeclareCaptureOKBody
}

func (o *GetDeclareCaptureOK) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/configuration/captures/{index}][%d] getDeclareCaptureOK  %+v", 200, o.Payload)
}

func (o *GetDeclareCaptureOK) GetPayload() *GetDeclareCaptureOKBody {
	return o.Payload
}

func (o *GetDeclareCaptureOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	o.ConfigurationVersion = response.GetHeader("Configuration-Version")

	o.Payload = new(GetDeclareCaptureOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeclareCaptureNotFound creates a GetDeclareCaptureNotFound with default headers values
func NewGetDeclareCaptureNotFound() *GetDeclareCaptureNotFound {
	return &GetDeclareCaptureNotFound{}
}

/*GetDeclareCaptureNotFound handles this case with default header values.

The specified resource already exists
*/
type GetDeclareCaptureNotFound struct {
	/*Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

func (o *GetDeclareCaptureNotFound) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/configuration/captures/{index}][%d] getDeclareCaptureNotFound  %+v", 404, o.Payload)
}

func (o *GetDeclareCaptureNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDeclareCaptureNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	o.ConfigurationVersion = response.GetHeader("Configuration-Version")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeclareCaptureDefault creates a GetDeclareCaptureDefault with default headers values
func NewGetDeclareCaptureDefault(code int) *GetDeclareCaptureDefault {
	return &GetDeclareCaptureDefault{
		_statusCode: code,
	}
}

/*GetDeclareCaptureDefault handles this case with default header values.

General Error
*/
type GetDeclareCaptureDefault struct {
	_statusCode int

	/*Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the get declare capture default response
func (o *GetDeclareCaptureDefault) Code() int {
	return o._statusCode
}

func (o *GetDeclareCaptureDefault) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/configuration/captures/{index}][%d] getDeclareCapture default  %+v", o._statusCode, o.Payload)
}

func (o *GetDeclareCaptureDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDeclareCaptureDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	o.ConfigurationVersion = response.GetHeader("Configuration-Version")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetDeclareCaptureOKBody get declare capture o k body
swagger:model GetDeclareCaptureOKBody
*/
type GetDeclareCaptureOKBody struct {

	// version
	Version int64 `json:"_version,omitempty"`

	// data
	Data *models.Capture `json:"data,omitempty"`
}

// Validate validates this get declare capture o k body
func (o *GetDeclareCaptureOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeclareCaptureOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeclareCaptureOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeclareCaptureOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeclareCaptureOKBody) UnmarshalBinary(b []byte) error {
	var res GetDeclareCaptureOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
