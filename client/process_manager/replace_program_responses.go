// Code generated by go-swagger; DO NOT EDIT.

package process_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v5/models"
)

// ReplaceProgramReader is a Reader for the ReplaceProgram structure.
type ReplaceProgramReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceProgramReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceProgramOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceProgramAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceProgramBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceProgramNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceProgramDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceProgramOK creates a ReplaceProgramOK with default headers values
func NewReplaceProgramOK() *ReplaceProgramOK {
	return &ReplaceProgramOK{}
}

/*
ReplaceProgramOK describes a response with status code 200, with default header values.

Program replaced
*/
type ReplaceProgramOK struct {
	Payload *models.Program
}

// IsSuccess returns true when this replace program o k response has a 2xx status code
func (o *ReplaceProgramOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace program o k response has a 3xx status code
func (o *ReplaceProgramOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace program o k response has a 4xx status code
func (o *ReplaceProgramOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace program o k response has a 5xx status code
func (o *ReplaceProgramOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace program o k response a status code equal to that given
func (o *ReplaceProgramOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replace program o k response
func (o *ReplaceProgramOK) Code() int {
	return 200
}

func (o *ReplaceProgramOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/programs/{name}][%d] replaceProgramOK  %+v", 200, o.Payload)
}

func (o *ReplaceProgramOK) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/programs/{name}][%d] replaceProgramOK  %+v", 200, o.Payload)
}

func (o *ReplaceProgramOK) GetPayload() *models.Program {
	return o.Payload
}

func (o *ReplaceProgramOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Program)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceProgramAccepted creates a ReplaceProgramAccepted with default headers values
func NewReplaceProgramAccepted() *ReplaceProgramAccepted {
	return &ReplaceProgramAccepted{}
}

/*
ReplaceProgramAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceProgramAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.Program
}

// IsSuccess returns true when this replace program accepted response has a 2xx status code
func (o *ReplaceProgramAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace program accepted response has a 3xx status code
func (o *ReplaceProgramAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace program accepted response has a 4xx status code
func (o *ReplaceProgramAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace program accepted response has a 5xx status code
func (o *ReplaceProgramAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this replace program accepted response a status code equal to that given
func (o *ReplaceProgramAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the replace program accepted response
func (o *ReplaceProgramAccepted) Code() int {
	return 202
}

func (o *ReplaceProgramAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/programs/{name}][%d] replaceProgramAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceProgramAccepted) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/programs/{name}][%d] replaceProgramAccepted  %+v", 202, o.Payload)
}

func (o *ReplaceProgramAccepted) GetPayload() *models.Program {
	return o.Payload
}

func (o *ReplaceProgramAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.Program)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceProgramBadRequest creates a ReplaceProgramBadRequest with default headers values
func NewReplaceProgramBadRequest() *ReplaceProgramBadRequest {
	return &ReplaceProgramBadRequest{}
}

/*
ReplaceProgramBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceProgramBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace program bad request response has a 2xx status code
func (o *ReplaceProgramBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace program bad request response has a 3xx status code
func (o *ReplaceProgramBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace program bad request response has a 4xx status code
func (o *ReplaceProgramBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace program bad request response has a 5xx status code
func (o *ReplaceProgramBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace program bad request response a status code equal to that given
func (o *ReplaceProgramBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replace program bad request response
func (o *ReplaceProgramBadRequest) Code() int {
	return 400
}

func (o *ReplaceProgramBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/programs/{name}][%d] replaceProgramBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceProgramBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/programs/{name}][%d] replaceProgramBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceProgramBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceProgramBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceProgramNotFound creates a ReplaceProgramNotFound with default headers values
func NewReplaceProgramNotFound() *ReplaceProgramNotFound {
	return &ReplaceProgramNotFound{}
}

/*
ReplaceProgramNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type ReplaceProgramNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace program not found response has a 2xx status code
func (o *ReplaceProgramNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace program not found response has a 3xx status code
func (o *ReplaceProgramNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace program not found response has a 4xx status code
func (o *ReplaceProgramNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace program not found response has a 5xx status code
func (o *ReplaceProgramNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace program not found response a status code equal to that given
func (o *ReplaceProgramNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the replace program not found response
func (o *ReplaceProgramNotFound) Code() int {
	return 404
}

func (o *ReplaceProgramNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/programs/{name}][%d] replaceProgramNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceProgramNotFound) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/programs/{name}][%d] replaceProgramNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceProgramNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceProgramNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceProgramDefault creates a ReplaceProgramDefault with default headers values
func NewReplaceProgramDefault(code int) *ReplaceProgramDefault {
	return &ReplaceProgramDefault{
		_statusCode: code,
	}
}

/*
ReplaceProgramDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceProgramDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// IsSuccess returns true when this replace program default response has a 2xx status code
func (o *ReplaceProgramDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this replace program default response has a 3xx status code
func (o *ReplaceProgramDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this replace program default response has a 4xx status code
func (o *ReplaceProgramDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this replace program default response has a 5xx status code
func (o *ReplaceProgramDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this replace program default response a status code equal to that given
func (o *ReplaceProgramDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the replace program default response
func (o *ReplaceProgramDefault) Code() int {
	return o._statusCode
}

func (o *ReplaceProgramDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/programs/{name}][%d] replaceProgram default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceProgramDefault) String() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/programs/{name}][%d] replaceProgram default  %+v", o._statusCode, o.Payload)
}

func (o *ReplaceProgramDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReplaceProgramDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
