// Code generated by go-swagger; DO NOT EDIT.

package process_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new process manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for process manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProgram(params *CreateProgramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProgramCreated, *CreateProgramAccepted, error)

	DeleteProgram(params *DeleteProgramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProgramAccepted, *DeleteProgramNoContent, error)

	GetProgram(params *GetProgramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProgramOK, error)

	GetPrograms(params *GetProgramsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProgramsOK, error)

	ReplaceProgram(params *ReplaceProgramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceProgramOK, *ReplaceProgramAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateProgram adds a program

Adds a new program to the process-manager configuration file.
*/
func (a *Client) CreateProgram(params *CreateProgramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProgramCreated, *CreateProgramAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProgramParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProgram",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/programs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProgramReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateProgramCreated:
		return value, nil, nil
	case *CreateProgramAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateProgramDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteProgram deletes a program

Deletes a program from the process-manager configuration file by its name.
*/
func (a *Client) DeleteProgram(params *DeleteProgramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProgramAccepted, *DeleteProgramNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProgramParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProgram",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/programs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProgramReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteProgramAccepted:
		return value, nil, nil
	case *DeleteProgramNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProgramDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProgram returns a program

Returns one program by its name from the process-manager configuration file.
*/
func (a *Client) GetProgram(params *GetProgramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProgramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProgramParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProgram",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/programs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProgramReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProgramOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProgramDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPrograms returns an array of programs

Returns an array of all configured programs in the process-manager configuration file.
*/
func (a *Client) GetPrograms(params *GetProgramsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProgramsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProgramsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPrograms",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/programs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProgramsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProgramsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProgramsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReplaceProgram replaces a program

Replaces a program from the process-manager configuration by its name.
*/
func (a *Client) ReplaceProgram(params *ReplaceProgramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceProgramOK, *ReplaceProgramAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceProgramParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceProgram",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/programs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceProgramReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceProgramOK:
		return value, nil, nil
	case *ReplaceProgramAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceProgramDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
